%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 4 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ASSEMBLY DESIGN SCRIPT) 211.49 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
(PTC Confidential) 270.58 24 T
(1-1) 526.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 648 612 720 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(ASMDES) 0 -270 594.05 658.2 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0 X
0 0 0 1 0 0 0 K
(SUMMAR) 274.22 712 T
(Y) 329.12 712 T
2 F
-0.46 (This demonstration illustrates how Pro/ENGINEER functionality may be) 189 684 P
(used throughout all phases of the engineering design process. In particular) 103.8 670 T
(, we will show) 459.59 670 T
(how 3D, parametric assembly layouts are created; how detailed parts and assemblies are) 103.8 656 T
-0.26 (completed; and how new model variations are created from existing designs and how infor-) 103.8 642 P
(mation from the engineer) 103.8 628 T
(\325) 225.89 628 T
(s notebook is captured;) 229.22 628 T
0 14 Q
(ASSEMBLY DESIGN SCRIPT) 211.49 598.67 T
0 12 Q
(INTRODUCTION) 72 569 T
2 F
(W) 103.8 541 T
(elcome to our demonstration of Pro/ENGINEER's assembly design capabilities. In this) 114.17 541 T
(demonstration, we'll take you through the process of creating a complex assembly with) 103.8 527 T
-0.03 (Pro/ENGINEER.   The focus of the demonstration is a spur gear three-speed transmission.) 103.8 513 P
-0.01 (The gear transmission consists of two shafts mounted parallel to each other and \336tted with) 103.8 499 P
(sliding spur gears of dif) 103.8 485 T
(ferent sizes. The three speed transmission has a low) 217.57 485 T
(, intermediate) 465.07 485 T
(and high gear) 103.8 471 T
(, as well as reverse. When the transmission is installed in the vehicle, the) 168.64 471 T
(clutch attaches to the pinion shaft at the left; the drive shaft attaches to the splined main) 103.8 457 T
(shaft at the right. W) 103.8 443 T
(e'll begin by creating a fully functioning, 3-D, parametric skeleton for) 198.49 443 T
(this assembly) 103.8 429 T
(. Next, we'll show how we can create a completed assembly of fully detailed) 168.02 429 T
(components. As the assembly grows, we'll demonstrate tools for managing lar) 103.8 415 T
(ge assem-) 478.37 415 T
-0.26 (blies. And \336nally) 103.8 401 P
-0.26 (, we'll create new design variations based on this year) 185.51 401 P
-0.26 (\325) 441.05 401 P
-0.26 (s model. Of course,) 444.39 401 P
(throughout the process, we'll be demonstrating how Pro/ENGINEER helps you to identify) 103.8 387 T
(problems, explore alternatives and develop an optimum solution for your best design.) 103.8 373 T
-0.48 (T) 103.8 345 P
-0.48 (raditionally) 110.71 345 P
-0.48 (, assembly layout work has been done in a 2-D environment. In fact, the layout) 165.26 345 P
(is usually a rough drawing with static, partially detailed, multiple views of the assembly) 103.8 331 T
(.) 525.32 331 T
(Using Pro/ENGINEER, though, we can do something much better) 103.8 317 T
(. Here, we will create a) 421.77 317 T
-0.03 (fully functioning, 3-D, parametric layout for the front end assembly using envelopes repre-) 103.8 303 P
(senting the dif) 103.8 289 T
(ferent components and sub-systems our assembly) 172.25 289 T
(. This will then serve us in) 409.1 289 T
(the creation of our detailed parts and the \336nished assembly) 103.8 275 T
(. Lets begin.) 385.31 275 T
0 F
(LA) 72 247 T
(YOUT MODEL) 87.56 247 T
2 F
(Here, I will take you through the creation of our layout model for the transmission assem-) 103.8 219 T
(bly) 103.8 205 T
(. On the screen, you see a simpli\336ed version of the assembly showing the gear lever) 118.36 205 T
(used for shifting the transmission. I am using a \322top down\323 approach to design. Next, you) 103.8 191 T
(see the datum planes which show the positions of the various components of my transmis-) 103.8 177 T
(sion. These datum planes represent the positions of the dif) 103.8 163 T
(ferent pieces of my gear set. I) 382.88 163 T
-0.18 (also have two datum planes which run through the middle of my main shaft. This serves as) 103.8 149 P
(the backbone or the skeleton of my design. Next, you see datum curves which I have cre-) 103.8 135 T
(ated to outline the position of my gear shafts, and for the shafts of the forks which will be) 103.8 121 T
(moving the gear shafts. I then create envelopes using surfaces only at these locations to) 103.8 107 T
(represent my gear and fork shafts. These envelopes give more realistic representations of) 103.8 93 T
(my critical components and help to have my basic design in-place upon which I can con-) 103.8 79 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ASSEMBLY DESIGN SCRIPT) 211.49 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(1-2) 72 24 T
(PTC Confidential) 270.58 24 T
(SCRIPT) 506.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(tinue to build the details. This is the ideal place to set up the various relationships which) 103.8 712 T
(will make my transmission work.) 103.8 698 T
0 F
(TRANSMISSION MOTION) 72 670 T
2 F
(Now) 103.8 642 T
(, my goal is to simulate the actual motion of my transmission. As you can see, I have) 126.35 642 T
(set up the necessary relations for the transmission. These describe the movement of the) 103.8 628 T
(transmission upon moving the gears into the desired positions. This brings us to Pro/PRO-) 103.8 614 T
-0.13 (GRAM. This allows us to build a nice user interface into a model so that anyone can call it) 103.8 600 P
-0.04 (up and modify it for use in their own design. Our transmission is a perfect example. W) 103.8 586 P
-0.04 (e've) 518.22 586 P
-0.39 (set it up so that anyone can easily shift it into the gear they want even if they don't know the) 103.8 572 P
(details of the design in the \336rst place.) 103.8 558 T
(The program is automatically created for you and contains the component and feature list) 103.8 530 T
(and relations for that assembly) 103.8 516 T
(. Given that, there are several things that we can add. First,) 250.33 516 T
-0.28 (we can add input statements. Here, we are prompting the user for the gear that he wants the) 103.8 502 P
(transmission to be in. Then, we can add relations. Here, as I already showed you, we have) 103.8 488 T
(written relations so that the appropriate gears shafts are moved and the proper gears) 103.8 474 T
-0.32 (meshed to set the transmission in the desired gear) 103.8 460 P
-0.32 (. W) 338.55 460 P
-0.32 (e can even add conditional logic to the) 354.6 460 P
-0.08 (component and feature list, so that the inputs can be used to turn on or of) 103.8 446 P
-0.08 (f dif) 452.4 446 P
-0.08 (ferent compo-) 472.43 446 P
(nents or features. The program for an assembly is the BOM for that assembly) 103.8 432 T
(. In addition) 474.29 432 T
(to the prompts, relations & conditional logic, we can add a number of other things, includ-) 103.8 418 T
(ing variable names in the BOM, and the ability to execute part programs as sub-routines.) 103.8 404 T
(Now) 103.8 376 T
(, lets see how this works. Now) 126.35 376 T
(, whenever we regenerate this model, we are prompted) 272.22 376 T
(for an input. Here, we'll enter the new values for the gear that we want our transmission to) 103.8 362 T
(be in. Currently) 103.8 348 T
(, it is in the neutral gear and I wish to shift it to the second gear) 178.68 348 T
(. In a) 480.98 348 T
(moment, the assembly updates to re\337ect our input and we can see that the main shaft sec-) 103.8 334 T
-0.22 (ond speed gear has correctly meshed with the second speed gear on the countershaft. Thus,) 103.8 320 P
(we can animate the model using our basic relations capabilities.) 103.8 306 T
-0.06 (Here, then, we've seen how to build a fully functioning, 3-D, feature based, parametric lay-) 103.8 278 P
-0.51 (out for complex assemblies. W) 103.8 264 P
-0.51 (e've developed concepts, located mounting points, generated) 249.79 264 P
(component envelopes, and simulated complex motions quickly and easily using the basic) 103.8 250 T
(capabilities of Pro/ENGINEER. In short, we've completed all the layout tasks for our) 103.8 236 T
(assembly and have con\336rmed that we have a correctly functioning mechanism. Next, lets) 103.8 222 T
(show how we can use this model to form the basis for an assembly of detailed parts.) 103.8 208 T
0 F
(ASSEMBLE GEAR) 72 180 T
2 F
-0.18 (Here is the actual gear set assembly with all the shafts and most of the gears assembled. T) 103.8 152 P
-0.18 (o) 531.18 152 P
-0.13 (illustrate how I have utilized my layout to assemble the detailed parts, I will now assemble) 103.8 138 P
(the missing second gear) 103.8 124 T
(. I use the simple assembling constraints required by Pro/ENGI-) 218.12 124 T
(NEER to easily assemble my gear) 103.8 110 T
(. I will insert my gear part onto the outer surface of its) 266.78 110 T
-0.16 (corresponding envelope part. I locate my gear onto the datum plane de\336ned for its location) 103.8 96 P
-0.14 (in the layout. I can now assemble my gear onto the layout. Before I do that, I also align the) 103.8 82 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ASSEMBLY DESIGN SCRIPT) 211.49 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
(PTC Confidential) 270.58 24 T
(1-3) 526.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 648 612 720 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(ASMDES) 0 -270 594.05 658.2 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(teeth properly using alignment planes in my part and on the layout so that it correctly) 94.8 721 T
(meshes. My gear is now correctly assembled. Also, the components know how they are) 94.8 707 T
(related, so if one changes, either positionally or geometrically) 94.8 693 T
(, the other will change) 390.64 693 T
(accordingly) 94.8 679 T
(.) 150.67 679 T
-0.24 (W) 94.8 651 P
-0.24 (e started our design with our layout model. Recall that the layout has all of the envelopes) 105.17 651 P
-0.28 (and mounting points needed to locate each component. As such, it was ultimately used as a) 94.8 637 P
(\336xture, jig, or "skeleton" for assembly the actual components.    Once components are in) 94.8 623 T
(place, we can blank out the layout part.) 94.8 609 T
(One advantage of this skeleton approach is that it enables us to assemble the detailed com-) 94.8 581 T
(ponents in whatever order they become available to us. Since everything is assembled to) 94.8 567 T
(the layout / skeleton, there's no need to wait for other parts to be \336nished.) 94.8 553 T
-0.05 (A second advantage, is that our detailed assembly can automatically be animated based on) 94.8 525 P
(the motion which is built into the layout part.) 94.8 511 T
-0.09 (A third advantage of this approach is that we can easily perform case studies, checking the) 94.8 483 P
-0.48 (precise locations and interactions of any assembly components without retrieving the entire) 94.8 469 P
(vehicle. Again, we simply assemble the desired components to our layout / skeleton.) 94.8 455 T
(These examples illustrate a key point for dealing with lar) 94.8 427 T
(ge assemblies. The best tools for) 368.21 427 T
-0.11 (building and managing lar) 94.8 413 P
-0.11 (ge assemblies are not those which require you to work with mas-) 220.58 413 P
(sive numbers of parts on the screen; they are those which allow you to work with the few-) 94.8 399 T
(est number of parts yet still give you access to all of the assembly information you need.) 94.8 385 T
-0.1 (Our layout model approach is one such tool. And, you'll see a number of others, too, as we) 94.8 371 P
(continue our demonstration.) 94.8 357 T
(As we continue to make changes and update our model, all of the components in our) 94.8 329 T
(assembly move exactly as you would expect. Of course, that's because they are assembled) 94.8 315 T
(to the mounting points of layout skeleton using Pro/ENGINEER's simple, intuitive assem-) 94.8 301 T
(bly commands.) 94.8 287 T
0 F
(ASSEMBL) 63 259 T
(Y FEA) 119.24 259 T
(TURES) 154.02 259 T
2 F
(I then complete building my model including the outer casing. What you see is a cutout of) 94.8 231 T
-0.27 (the gear box. This is a result of a cut feature which I created in my assembly) 94.8 217 P
-0.27 (. Assembly fea-) 455.9 217 P
(tures can be created at any time in the assembly) 94.8 203 T
(. Pro/ENGINEER of) 322.97 203 T
(fers the unique ability) 421.74 203 T
-0.1 (to create features like cuts, slots, holes at the assembly level i.e. these will show up only in) 94.8 189 P
(the assembly and not in the part. These are intelligent features which intersect with the) 94.8 175 T
-0.13 (components of the assembly to give the desired geometry and can be modi\336ed at any time.) 94.8 161 P
-0.24 (I can now suppress the cut which I created in this assembly to show my entire transmission) 94.8 147 P
(model.) 94.8 133 T
0 F
(P) 63 105 T
(AR) 69.44 105 T
(T CREA) 86.35 105 T
(TION) 130.46 105 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ASSEMBLY DESIGN SCRIPT) 211.49 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(1-4) 72 24 T
(PTC Confidential) 270.58 24 T
(SCRIPT) 506.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
-0.13 (My transmission housing needs a gasket at the location where my transmission is mounted) 103.8 712 P
-0.01 (to the rest of the automobile assembly) 103.8 698 P
-0.01 (. I can create components right here in the assembly) 285.61 698 P
-0.01 (.) 534.01 698 P
(This is very useful since my gasket needs to be of the same size and shape as that of the) 103.8 684 T
-0.04 (housing and also needs to match the bolt holes used for assembling it. I am going to create) 103.8 670 P
-0.34 (a simple protrusion for my gasket and make use of the existing geometry from my housing.) 103.8 656 P
(I use the existing edges to create my sketched edges and make use of the selection tools to) 103.8 642 T
-0.29 (grab loops containing multiple edges. My section has now been completed quickly and eas-) 103.8 628 P
(ily) 103.8 614 T
(. I then specify the thickness of the gasket and can preview my feature before it is cre-) 115.69 614 T
(ated. I have now \336nished creating the gasket right inside my assembly) 103.8 600 T
(. This also ensures) 439.64 600 T
(that any changes to the geometry of the housing will automatically update the gasket.) 103.8 586 T
0 F
(COMPONENT DISPLA) 72 558 T
(Y) 197.23 558 T
2 F
-0.3 (I now wish to continue working on my gear design which is inside the housing. It would be) 103.8 530 P
(ideal if I could see through my outer housing at my inner gear assembly) 103.8 516 T
(. W) 447.97 516 T
(ith Pro/ENGI-) 464.82 516 T
(NEER I can set up a visualization representation which will allow me to have my outer) 103.8 502 T
-0.29 (parts in wireframe mode while continuing to have the inner gear assembly in shaded mode.) 103.8 488 P
-0.12 (I call this visual representation a component display state and give it a name. I can then set) 103.8 474 P
(up numerous component display states, and store them and call them up at any time as) 103.8 460 T
-0.18 (desired by me. I select my housing, the gasket I just created and the top cover to be in wire-) 103.8 446 P
-0.35 (frame mode. I can even blank components or change to other display mode as desired. I am) 103.8 432 P
(also of) 103.8 418 T
(fered numerous tools to select the components whose display I wish to control. As) 135.91 418 T
(you can see my display updates to show me the inside gear train more clearly) 103.8 404 T
(. This is a) 474.29 404 T
-0.27 (great tool for improving the visual clarity of assemblies and especially if you wish to exam-) 103.8 390 P
(ine the inner \322guts\323 of your assembly) 103.8 376 T
(. This gives a great performance bene\336t also since I) 282.32 376 T
(only need to shade what is necessary thus saving time in rendering my models.) 103.8 362 T
0 F
(SIMPLIFIED REPRESENT) 72 334 T
(A) 217.46 334 T
(TIONS) 225.24 334 T
2 F
(Pro/ENGINEER is full three-dimensional solid modeler which enables design of accurate) 103.8 306 T
-0.18 (models. Design of accurate models is necessary to ensure that I do not have to worry about) 103.8 292 P
(validation and re-work. Thus, I have to make sure I do not have undesirable interferences) 103.8 278 T
(between the components of my assembly) 103.8 264 T
(. Whenever the shifter changes gears, the forks) 300.66 264 T
(move back and forth. The forks are supported by the housing and it is critical that they) 103.8 250 T
(don\325) 103.8 236 T
(t interfere with the housing.) 125.58 236 T
(I do not really need to check interference for all the components here. I can simplify my) 103.8 208 T
(assembly so that I can work with only the parts that I am currently interested in. Dif) 103.8 194 T
(ferent) 505.86 194 T
(design team members performing dif) 103.8 180 T
(ferent tasks require dif) 281.55 180 T
(ferent information on the) 389.64 180 T
(screen and can create dif) 103.8 166 T
(ferent reps of the same single product model. This improves my) 222.19 166 T
(performance while working with the assembly as well as providing me greater visual clar-) 103.8 152 T
(ity) 103.8 138 T
(. This is possible through the use of simpli\336ed representations of the assembly) 115.69 138 T
(. Simpli-) 490.56 138 T
(\336ed representations allows me to exclude unwanted components from an assembly and) 103.8 124 T
-0.45 (work at a level of detail that is convenient for myself. I can set up numerous representations) 103.8 110 P
(and store them, and then use them later at any time I wish to, and they can be used or sub-) 103.8 96 T
(stituted at any time for the complete, or \322master\323 assembly) 103.8 82 T
(. I have in fact, all along been) 385.64 82 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ASSEMBLY DESIGN SCRIPT) 211.49 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
(PTC Confidential) 270.58 24 T
(1-5) 526.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 648 612 720 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(ASMDES) 0 -270 594.05 658.2 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
-0.05 (working with simpli\336ed representations to show the various stages of the design process. I) 103.8 712 P
(pick exclude as the default rule and will select all the components that I wish to include in) 103.8 698 T
(this representation. I have numerous selection tools which I can use to select the compo-) 103.8 684 T
-0.11 (nents. I will use the proximity rule which is available to me i.e. by distance. I can select all) 103.8 670 P
(components within 5cm of this fork shaft. Upon updating my selections I notice that I still) 103.8 656 T
(have a gear and the shifter assembly which I don\325) 103.8 642 T
(t need. I can undo those selection to) 341.86 642 T
(exclude them as well.) 103.8 628 T
0 F
(INTERFERENCE CHECKING, CROSS-SECTIONS & P) 72 600 T
(AR) 370.14 600 T
(T MODIFICA) 387.05 600 T
(TION) 460.49 600 T
2 F
(W) 103.8 572 T
(ith my relevant components in place, I can now perform an interference check for my) 114.65 572 T
-0.07 (fork shafts. Here, we'll perform a global interference check; now) 103.8 558 P
-0.07 (, the system is looking for) 412.76 558 P
(any interference between any of the components in our assembly) 103.8 544 T
(. If we want, we could) 414.61 544 T
(even automate this process, checking for interference at each increment of motion.) 103.8 530 T
(For each case of interference, the system will highlight & name the two parts, and locate) 103.8 502 T
-0.05 (the volume of interference. Here, the system tells us that it has found interference between) 103.8 488 P
(the housing and the shift rod at the end. Now) 103.8 474 T
(, lets take a closer look. Correctness of the) 318.99 474 T
(model is necessary to obtain valid cross-sections. I show the cross-section which I have) 103.8 460 T
(created in this assembly passing through the fork shaft. This clearly shows the detected) 103.8 446 T
(interference by showing the outlining the entities in its plane of intersection. Thus, assem-) 103.8 432 T
(bly cross-sections are a good way to visualize interference and can be displayed in draw-) 103.8 418 T
(ings also if desired.) 103.8 404 T
(Using the measurement functionality of) 103.8 376 T
(fered by Pro/ENGINEER, I can quickly \336nd the) 294.23 376 T
-0.34 (diameter of my fork shaft and the hole it sits in. The interference is clearly because the hole) 103.8 362 P
-0.15 (is not big enough to accommodate the hole and I can \336x this modifying either one of them.) 103.8 348 P
(I can modify my part from the assembly level itself. I modify the shaft to 3.8 to make it) 103.8 334 T
(smaller than the hole and then update my model. Since all the models in my assembly are) 103.8 320 T
(fully parametric, we update the entire assembly in a matter of seconds. W) 103.8 306 T
(e can redisplay) 456.1 306 T
-0.39 (the cross-section to make sure that the problem has been resolved. As you saw) 103.8 292 P
-0.39 (, the problem) 474.52 292 P
-0.04 (of making parts \336t in an assembly can be easily handled with the various tools available in) 103.8 278 P
(Pro/ENGINEER for this purpose and ensures a better and quick design.) 103.8 264 T
0 F
(T) 72 236 T
(ABLE DRIVEN P) 79.12 236 T
(AR) 171.56 236 T
(TS AND INTERCHANGE) 188.47 236 T
2 F
(Eventually) 103.8 208 T
(, we will complete the fully-detailed design of our car) 155.02 208 T
(. But what comes next?) 412.31 208 T
(Design variations & engineering re-use. The next step in our design process, then, is to) 103.8 194 T
(demonstrate how we can take advantage of this year's design to produce next year's.This) 103.8 180 T
(brings us to "table driven parts and assemblies".) 103.8 166 T
-0.25 (W) 103.8 138 P
-0.25 (orking with table driven assemblies is just like working with a catalog of standard assem-) 114.17 138 P
(blies. T) 103.8 124 T
(o demonstrate, let\325) 138.96 124 T
(s look at the gear set assembly) 227.95 124 T
(. This contains ball bearings. The) 373.15 124 T
-0.32 (model tree serves as a BOM for my assembly showing me the components which are a part) 103.8 110 P
-0.01 (of the assembly along with the assembly structure. I can also use it to highlight the compo-) 103.8 96 P
(nents on the screen. I have just selected my ball bearing assembly and can see it on the) 103.8 82 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ASSEMBLY DESIGN SCRIPT) 211.49 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(1-6) 72 24 T
(PTC Confidential) 270.58 24 T
(SCRIPT) 506.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(screen, and notice that it is called 300-150-SM6. The ball bearing has six balls in the race.) 103.8 712 T
-0.36 (The model tree can also be used to report information on the model and its components and) 103.8 698 P
(features by adding customized columns.) 103.8 684 T
(Upon retrieving the ball bearing assembly) 103.8 656 T
(, I am prompted to select the assembly I want to) 304.65 656 T
(retrieve. This is because my ball bearing assembly is really a table driven assembly and) 103.8 642 T
(contains a family of assemblies any of which I can directly retrieve. I select the generic) 103.8 628 T
(assembly to retrieve and a we can now look at the family table of this assembly) 103.8 614 T
(. When) 483.96 614 T
-0.04 (we're creating a family of assemblies, we select the components which may vary from one) 103.8 600 P
-0.31 (design to the next. By simply typing in a line of text, I am ef) 103.8 586 P
-0.31 (fectively creating a new design) 389.25 586 P
-0.35 (while retaining the portions of my design that I want in my new one. As you can see, I have) 103.8 572 P
(this instance of my assembly in the gear train. It contains six lar) 103.8 558 T
(ge balls in the bearing.) 409.88 558 T
(Family tables of) 103.8 544 T
(fer many advantages. First, it provides a very simple and compact way of) 181.58 544 T
-0.12 (creating and storing a lar) 103.8 530 P
-0.12 (ge number of objects. Second, it promotes the use of standardized) 222.4 530 P
(components and allows you to represent your actual part inventory on Pro/ENGINEER.) 103.8 516 T
(Third, it allows for interchangeability of parts and assemblies. I wish to replace this with) 103.8 502 T
(this other assembly which I have de\336ned which consists of twelve small balls in the race,) 103.8 488 T
(and is called 300-150-SM12.) 103.8 474 T
(Let\325) 103.8 446 T
(s look at the gear set subassembly where the ball bearings were assembled. The ball) 123.13 446 T
(bearings are a family table assembly that has been assembled to the shafts. If I wanted to) 103.8 432 T
-0.38 (change the ball-bearing, I would normally have to disassemble the old ones and reassemble) 103.8 418 P
(the new ones. T) 103.8 404 T
(o change the bearing, I simply tell the system to automatically replace the) 178.94 404 T
(ball bearing with a member from its family table and my model updates to show my new) 103.8 390 T
(design. This change is also updated in my top-level transmission assembly) 103.8 376 T
(.) 460.67 376 T
0 F
(LEVELS OF DET) 72 348 T
(AIL) 165.8 348 T
2 F
(One of the key issues while working with assemblies, especially lar) 103.8 320 T
(ge assemblies, is per-) 427.87 320 T
(formance. One of the tools that Pro/ENGINEER provides to increase the viewing perfor-) 103.8 306 T
(mance with assemblies is called Levels of Detail. Let me demonstrate this to you.) 103.8 292 T
(I want to get a better look at the speedometer which is located on that side away from me.) 103.8 264 T
(Let me spin the assembly to get a better look at it. Y) 103.8 250 T
(ou will notice as I spin the level of) 353.58 250 T
(detail on my assembly reduces signi\336cantly) 103.8 236 T
(. This allows me to faster spin my model and) 312.67 236 T
-0.13 (control its orientation. If I zoom out, the level of detail further reduces since I do not really) 103.8 222 P
-0.16 (need that high a level of detail. Upon zooming in or getting closer to the model the level of) 103.8 208 P
(detail will increase to show me the relevant features, etc. Thus, I can set my level of detail) 103.8 194 T
(which I wish to use while manipulating my model. I can quickly get to the orientation I) 103.8 180 T
(want to view and the system automatically recreates the full level of detail at the changed) 103.8 166 T
(position. This powerful tool enables an improved performance while working with assem-) 103.8 152 T
(blies.) 103.8 138 T
0 F
(RESTRUCTURE) 72 110 T
2 F
-0.03 (A look at my model tree tells me that the speedometer is assembled to my top-level assem-) 103.8 82 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ASSEMBLY DESIGN SCRIPT) 211.49 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
(PTC Confidential) 270.58 24 T
(1-7) 526.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 648 612 720 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(ASMDES) 0 -270 594.05 658.2 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(bly) 103.8 712 T
(. I wish to have it structured so that it is a part of my gear set assembly and not the top) 118.36 712 T
(level transmission assembly) 103.8 698 T
(. Restructure allows the user to move components from one) 237.68 698 T
(sub-assembly to another while maintaining the placement constraints and the relative posi-) 103.8 684 T
-0.33 (tion. W) 103.8 670 P
-0.33 (ith this and making use of the model tree, I just pick the speedometer gear and place) 138.99 670 P
(it in the gear set sub-assembly) 103.8 656 T
(. Now) 248 656 T
(, the gear set updates to include the speedometer and) 276.55 656 T
(the model tree updates as well.) 103.8 642 T
0 F
(INTERCHANGE) 72 614 T
2 F
-0.05 (I can continue to work on my deliverables at the same time. Here you see a drawing of my) 103.8 586 P
-0.04 (shifter assembly with the BOM and the balloons on exploded view of the assembly) 103.8 572 P
-0.04 (. I wish) 501.46 572 P
-0.31 (to make a change to my gear shifter to give it a sportier look for the sports model of the car) 103.8 558 P
-0.31 (.) 534.3 558 P
(I want to do this by replacing my boot of the lever with a smoother boot and changing the) 103.8 544 T
-0.32 (shift lever to a straight one. I can easily do this by using interchange groups. I simply select) 103.8 530 P
(my component to replace and the new boot to replace it with. The interchange is automati-) 103.8 516 T
(cally performed and I now have a new smoother boot. Similarly) 103.8 502 T
(, I replace my gear lever) 409.97 502 T
-0.25 (with a straight lever and my whole model and the tree updates automatically) 103.8 488 P
-0.25 (. I can thus cre-) 466.68 488 P
(ate completely new models and substitute them for one another in the assembly) 103.8 474 T
(.) 484.31 474 T
0 F
(ASSOCIA) 72 446 T
(TIVITY) 124.45 446 T
2 F
(If I now go back to my drawing, you can see that my drawing has updated automatically) 103.8 418 T
(also. The exploded view now has the new components, the BOM contains the new parts) 103.8 404 T
(with their correct names and the balloons are correctly attached. That\325) 103.8 390 T
(s what we mean) 439.38 390 T
(about Pro/ENGINEER being a fully associative modeler) 103.8 376 T
(, any change in one environment) 374.61 376 T
(propagates to all other associative environments.) 103.8 362 T
0 F
(ENGINEERING NOTEBOOK) 72 334 T
2 F
( W) 103.8 306 T
(e've talked so far about how to model the gears, ball bearings and other components of) 117.17 306 T
(the transmission, modify them, and store them in dif) 103.8 292 T
(ferent shapes & sizes. But, how does) 354.91 292 T
(one come up with the correct design to use? How does an engineer come up with the opti-) 103.8 278 T
-0.15 (mal size gears to give the desired ratios? This is a complex issue because of the interdepen-) 103.8 264 P
(dency between all the gears. T) 103.8 250 T
(o do this, I will use my engineering notebook. Using Pro/) 248.91 250 T
-0.13 (NOTEBOOK, you can create engineering notebooks to document all of your design issues) 103.8 236 P
(& decisions. Beyond simple documentation, though, this engineering notebook can actu-) 103.8 222 T
(ally drive all of the geometry and deliverables associated with your design.) 103.8 208 T
-0.28 (Here, we have what you might think of as a graphical spreadsheet, or in this case a gear cal-) 103.8 180 P
-0 (culator) 103.8 166 P
-0 (. A simple graphic created by using the drawing capabilities of our notebook shows) 136.46 166 P
(the basics of our gear design. I\325ve used the relations capabilities and parameters to create) 103.8 152 T
(the critical parameters for my gears. My critical parameters include the pitch diameter) 103.8 138 T
(,) 516.22 138 T
-0.22 (number of teeth, thickness, pressure angle, module, and countershaft placement. Engineers) 103.8 124 P
-0.16 (don\325) 103.8 110 P
-0.16 (t think of gears in terms of these parameters but they think in terms of the desired gear) 125.58 110 P
(ratios.) 103.8 96 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ASSEMBLY DESIGN SCRIPT) 211.49 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(1-8) 72 24 T
(PTC Confidential) 270.58 24 T
(SCRIPT) 506.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
-0.22 (Let\325) 103.8 712 P
-0.22 (s look at the relations of this graphical spreadsheet. The \336rst thing I want to do is calcu-) 123.13 712 P
(late the pitch diameters for the dif) 103.8 698 T
(ferent gears. I\325m using the simultaneous equation con-) 266.22 698 T
(struct to solve the six equations for six unknowns. I also want to calculate the number of) 103.8 684 T
-0.34 (teeth for each gear) 103.8 670 P
-0.34 (. In addition, I might want to incorporate some design rule checking. It is) 191.09 670 P
-0.21 (a good technique that really stops the user from doing something wrong. I\325m going to print) 103.8 656 P
(out a message on my engineering notebook page telling the user whether or not any gear) 103.8 642 T
(ratio exceeds the design limits thus ensuring compliance with the design rules.) 103.8 628 T
-0.43 (At the moment I have a reverse gear ratio of 3.8 and the number of teeth on my reverse gear) 103.8 600 P
-0.12 (is 6. I am going to change that to 5. Upon updating the model, I observe that I am getting a) 103.8 586 P
(warning, the gear ratio parameters are invalid. Let me reduce the reverse gear ratio to 3.6.) 103.8 572 T
(When I regenerate now) 103.8 558 T
(, my message changes to show me that my design is OK. Also, the) 215.3 558 T
(system has calculated the new pitch diameters and number of teeth, which has now) 103.8 544 T
(changed to 7. The same change can be observed upon updating my solid model. This is) 103.8 530 T
(because my engineering notebook drives my design.) 103.8 516 T
(So, using our engineering notebook, we can help to automate our engineering analyses,) 103.8 488 T
-0.3 (annotate our design process, & truly capture the logic and intent of our designs. And, as we) 103.8 474 P
-0.07 (have seen, this notebook is associative with \050i.e. can drive\051 the geometry & deliverables of) 103.8 460 P
(our design. A problem with a lot of or) 103.8 446 T
(ganizations is that the engineering notebook walks) 285.9 446 T
(away with the engineer at the end of the project. Now when I\325m incorporating my engi-) 103.8 432 T
-0.19 (neering notebook as part of my CAD database, I can keep that information with the model.) 103.8 418 P
-0.1 (I think you'll agree, this is a much richer) 103.8 404 P
-0.1 (, more powerful & valuable database than you can) 296.31 404 P
(create with any other CAD system.) 103.8 390 T
0 F
(CONCLUSION) 72 362 T
2 F
(I would like to conclude this demonstration by summarizing what you have seen. That is,) 103.8 334 T
-0.32 (the process of designing complex and lar) 103.8 320 P
-0.32 (ge assemblies on Pro/ENGINEER. Starting with a) 298.28 320 P
(3-D, parametric, assembly skeleton, we validated concepts, we saw the creation of fully) 103.8 306 T
(functioning, complex assemblies made up of detailed parts. W) 103.8 292 T
(e worked with simpli\336ed) 402.13 292 T
(reps and interchangeable models for managing lar) 103.8 278 T
(ge assemblies. And \336nally) 343.52 278 T
(, we showed) 469.4 278 T
-0.29 (ways of generating & storing many design variations based on our initial design. In the pro-) 103.8 264 P
-0.43 (cess, we used engineering notebooks to consolidate and manage the critical elements of our) 103.8 250 P
-0.15 (design. All along Pro/ENGINEER helped us to identify problems, explore alternatives and) 103.8 236 P
(develop an optimum solution for your best design.) 103.8 222 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 8
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-Roman
%%EOF
