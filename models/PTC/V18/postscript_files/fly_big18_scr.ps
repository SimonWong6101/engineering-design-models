%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 5 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
71.4 744 541 744 2 L
0.9 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
541 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(FLY THROUGH SCRIPT) 226.27 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6-1) 526.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 432 612 504 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(FL) 0 -90 583.25 495 TF
(Y) 0 -90 583.25 482.19 TF
(-BIG) 0 -90 583.25 474.86 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(FLY THROUGH SCRIPT) 226.27 710.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(FOREWORD) 103.8 678 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(This demonstration is a general guide-line for presenting the capabilities and basic func-) 103.8 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.4 (tionality of Pro/FL) 103.8 636 P
-0.4 (Y) 191.81 636 P
-0.4 (-THROUGH. The concepts of this demonstration can be applied to any) 199.14 636 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (Pro/ENGINEER model exported into the VRML format. Depending on the hardware avail-) 103.8 622 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(able for the demonstration a lar) 103.8 608 T
(ger or smaller model will enhance the presentation of the) 253.88 608 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(product. The model manipulation and \337ying should appear smooth while the model needs) 103.8 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to be as lar) 103.8 580 T
(ge as possible.) 155.9 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pro/FL) 103.8 552 T
(Y) 136.61 552 T
(-THROUGH is directed to aid lar) 143.94 552 T
(ge assembly designers and managers in working) 304.69 552 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (with very lar) 103.8 538 P
-0.05 (ge models, but other groups in a company can also use the product. Examples) 164.8 538 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of such groups are Upper management, Marketing, Product maintenance and installation) 103.8 524 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and Sales.) 103.8 510 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (This demo will show new and old tools in Pro/FL) 103.8 482 P
-0.13 (Y) 339.79 482 P
-0.13 (-THROUGH. The demo will show how) 347.12 482 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the product can be used as a front end graphical browser to Pro/ENGINEER and for Engi-) 103.8 468 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(neering Design Review) 103.8 454 T
(.) 215.66 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(INTRODUCTION) 103.8 426 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(W) 103.8 398 T
(elcome to a demonstration of Parametric T) 114.17 398 T
(echnology's product, Pro/FL) 318.62 398 T
(Y) 453.91 398 T
(-THROUGH.) 461.24 398 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Graphical br) 103.8 370 T
(owsing of very lar) 166.36 370 T
(ge assemblies) 252.91 370 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Pro/FL) 103.8 342 T
(Y) 136.61 342 T
(-THROUGH allows you to view) 143.94 342 T
(, manipulate, and  investigate very lar) 299.81 342 T
(ge assem-) 480.23 342 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (blies. It has multiple navigation tools enabling control of the orientation of both design and) 103.8 328 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (viewpoint, additional viewing windows for inspection of individual components and subas-) 103.8 314 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(semblies, and a tree tool showing assembly structure, model names and parameters. Pro/) 103.8 300 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FL) 103.8 286 T
(Y) 116.6 286 T
(-THROUGH provides fast, real-time 3D graphical browsing.) 123.94 286 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(T) 103.8 258 T
(ight integration with Pr) 109.81 258 T
(o/ENGINEER) 223.06 258 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(It is also tightly integrated with Pro/ENGINEER. In Pro/FL) 103.8 230 T
(Y) 388.93 230 T
(-THROUGH, you are able to) 396.26 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(select a number of components from the assembly) 103.8 216 T
(, create a simpli\336ed representation of) 343.98 216 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(them on the \337y and bring them into Pro/ENGINEER automatically) 103.8 202 T
(. Changes made to the) 424.01 202 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(components in Pro/ENGINEER can then be automatically propagated back into Pro/FL) 103.8 188 T
(Y) 522.55 188 T
(-) 529.88 188 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(THROUGH.) 103.8 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Engineering Design Review) 103.8 146 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.5 (Engineering information from the Pro/ENGINEER model is accessible, views can be saved) 103.8 118 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and \337ight paths can be created to capture and convey information about the assembly to) 103.8 104 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(other team members. The great performance, navigation tools, investigative capabilies,) 103.8 90 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(integration with Pro/ENGINEER and the ability to capture information makes Pro/FL) 103.8 76 T
(Y) 514.57 76 T
(-) 521.9 76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(6-2) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SCRIPT) 506.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 542 744 2 L
0.9 H
2 Z
N
541 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(THROUGH a good tool for inspecting and resolving design issues in lar) 103.8 712 T
(ge assemblies.) 450.55 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(VRML.) 103.8 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Pr) 103.8 670 T
(o/WEB PUBLISH) 115.36 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Pro/FL) 103.8 642 T
(Y) 136.61 642 T
(-THROUGH reads VRML, V) 143.94 642 T
(irtual Reality Modeling Language, \336les that comply) 286.52 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with the VRML 1.0 standard. The module Pro/WEB PUBLISH allows you to export Pro/) 103.8 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ENGINEER parts and assemblies into VRML format.  VRML is the new emer) 103.8 614 T
(ging stan-) 481.87 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.47 (dard for conveying 3-dimensional graphical information over the Internet.  It can be seen as) 103.8 600 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the 3-D equivalent to HTML which is currently used for conveying 2-D information such) 103.8 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(as text and pictures.  Pro/ WEB PUBLISH module enables you to make your Pro/ENGI-) 103.8 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NEER models ready for viewing in Pro/FL) 103.8 558 T
(Y) 309.25 558 T
(-THROUGH or other commercial VRML) 316.58 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(compliant browsers.) 103.8 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (Now to the Pro/FL) 103.8 516 P
-0.21 (Y THROUGH it self. First, let\325) 192.32 516 P
-0.21 (s talk a little about the User) 340.94 516 P
-0.21 (-Interface. As) 471.45 516 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(you can see it is very light and easy to both use and learn. W) 103.8 502 T
(e also have Icon for quick) 393.79 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(access to common operations and intuitive wheels for view manipulation.) 103.8 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(PERFORMANCE IMPROVEMENTS) 103.8 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(One purpose of this product is to improve the general performance and ef) 103.8 432 T
(\336ciency of work-) 456.17 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.46 (ing with lar) 103.8 418 P
-0.46 (ge assemblies. T) 157.99 418 P
-0.46 (o achieve these goals we've focused and implemented three key) 235.88 418 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(features.) 103.8 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.18 (First, we've reduced the size of the data base describing the model, compared to Pro/ENGI-) 103.8 376 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.38 (NEER, through the export into the VRML format.  The bene\336t of this feature is two fold. A) 103.8 362 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(smaller data base means that the memory requirements for a lar) 103.8 348 T
(ge assembly is reduced,) 408.18 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(which permits use of smaller and more cost ef) 103.8 334 T
(fective hardware. It also reduces retrieval) 324.88 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time into working session. Retrieving a VRML model into the Pro/FL) 103.8 320 T
(Y) 438.27 320 T
(-THROUGH is) 445.61 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.19 (much faster than retrieving the same assembly into a Pro/ENGINEER session, leaving you) 103.8 306 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(more time for productive work.) 103.8 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The second and third features are object level of detail and culling allowing us to improve) 103.8 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the view manipulation performance, which makes the Pro/FL) 103.8 250 T
(Y) 397.22 250 T
(-THROUGH a fast tool for) 404.55 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(design review and model investigation.) 103.8 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Here we have used a speci\336c characteristic of the VRML format which allows us to make) 103.8 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this  performance improvement, and that is "level of detail".  Components are displayed) 103.8 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.07 (with a level of detail that is  dependent on the distance from the observer) 103.8 180 P
-0.07 (.  An object in the) 451.43 180 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (background which is far away will be simpli\336ed while an object closer to the observer will) 103.8 166 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(be represented in more detail.  By doing this, we reduce the complexity of the graphical) 103.8 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(representation of the model and the amount of computing resources spent to render it.) 103.8 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Additionally) 103.8 124 T
(, unique occlusion culling techniques are utilized to remove components that) 163.69 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (are masked from view by closer objects from the rendering process. This greatly improves) 103.8 110 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(viewing operations of the model.) 103.8 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
71.4 744 541 744 2 L
0.9 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
541 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6-3) 526.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 432 612 504 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(FL) 0 -90 583.25 495 TF
(Y) 0 -90 583.25 482.19 TF
(-BIG) 0 -90 583.25 474.86 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0 X
0 0 0 1 0 0 0 K
(EXAMINER VIEWER) 103.8 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.15 (Now let's take a closer look at the capabilities of the  product and we will see how the auto-) 103.8 670 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(matic switching of the level of detail works, some of the functionality that we have put in) 103.8 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and also the bi-directional integration with Pro/ENGINEER.) 103.8 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 103.8 614 T
(ake a closer look at these colored connectors by the piping on the engine.  If we use the) 110.29 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(seek tool to get a little bit closer to it, we can see how the connectors are brought forward) 103.8 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and displayed in more and more detail as I'm getting closer) 103.8 586 T
(. Now) 386.59 586 T
(, take a look again as we) 415.14 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (are going away from the model and coming in.  Y) 103.8 572 P
-0.13 (ou can see how we simplify the model as) 340.89 572 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(we are moving away from it and how it recaptures the detail of the model as we approach.) 103.8 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.1 (It  is the behavior of the automatic switching of level of detail which gives us the great per-) 103.8 544 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(formance of the FL) 103.8 530 T
(Y) 195.58 530 T
(-THROUGH. W) 202.91 530 T
(e've also, as you can see, great performance in spin-) 281.93 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ning and panning our model.  Here we are having an assembly of approximately) 103.8 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(components.  Y) 103.8 502 T
(ou can see how easily the model can be viewed from dif) 178.26 502 T
(ferent angles.) 447.65 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(LEVELS OF DET) 103.8 460 T
(AIL ACCELERA) 197.6 460 T
(T) 288.38 460 T
(OR) 296.17 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(The performance and the resolution of the model are closely dependent. Low resolution) 103.8 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(will improve manipulation speed and vice versa. The LOD-accelerator) 103.8 418 T
(, here in the upper) 442.23 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (left corner of the window) 103.8 404 P
-0.05 (, is a very useful tool which enables full user control over the per-) 224.77 404 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(formance vs. the resolution of the model. See, we can change the level of detail of the) 103.8 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(model and we can see how manipulation performance is improved. By introducing this) 103.8 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (kind of functionality) 103.8 362 P
-0.15 (, we're giving the user a great tool to control the speed at which he can) 201.38 362 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(manipulate the model and at what level of detail he wants to do it. For very lar) 103.8 348 T
(ge assem-) 479.87 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(blies, this is a very good tool to bring down the level of detail, allowing you to manipulate) 103.8 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the model, put it in a proper position and then recapture the detail.) 103.8 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Other tools for performance controll include an option to automatically lower the detail as) 103.8 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the model moves. let\325) 103.8 278 T
(s turn it on.) 207.13 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(EXPLODE) 103.8 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Now) 103.8 208 T
(, we will look at  the dynamic explode functionality) 126.35 208 T
(. The model can be exploded in) 373.55 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.55 (Pro/FL) 103.8 194 P
-0.55 (Y) 136.61 194 P
-0.55 (-THROUGH to provide better investigative capabilities and alternate model views.) 143.94 194 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( The explode positions are based on a selected explode state in Pro/ENGINEER.) 103.8 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Here, we will select a couple of components and the simply drag them out towards there) 103.8 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\336nal positions. See, we can get a better view of the hidden components making it easier to) 103.8 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(investigate the assembly) 103.8 124 T
(.) 220.34 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Now) 103.8 96 T
(, let's explode the whole assembly) 126.35 96 T
(. First, we\325ll change the view orientation. V) 289.04 96 T
(iews) 497.63 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(which have been set up in Pro/ENGINEER are automatically exported for use in Pro/FL) 103.8 82 T
(Y) 526.2 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(6-4) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SCRIPT) 506.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 542 744 2 L
0.9 H
2 Z
N
541 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(THROUGH. Y) 103.8 712 T
(ou can also add new views to the list in FL) 175.92 712 T
(Y THROUGH. W) 380.04 712 T
(e\325ll use this) 466.73 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(view for our explosion. WOW!) 103.8 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(W) 103.8 670 T
(ALK VIEWER) 114.47 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(So far we have explored one way to view and investigate your model.  Now) 103.8 642 T
(, let\325) 467.28 642 T
(s look at) 488.61 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(another of our three possible ways to view a model.  The examiner viewer which we have) 103.8 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(been using so far allows you to rotate the model while you as an observer is stationary) 103.8 614 T
(.) 516.96 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.4 (As I change over to the walk viewer) 103.8 586 P
-0.4 (, the model will be stationary while I'm moving relative) 274.16 586 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to it.  Let\325) 103.8 572 T
(s go inside the wreckage and look around. The walk viewer is easy to use.) 151.14 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(SUBSETS) 103.8 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.28 (One of the greatest capabilities  in  Pro/FL) 103.8 502 P
-0.28 (Y_THROUGH is the ability to record and replay) 304.31 502 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (a \337ight session. This will enable users to capture information about the assembly and share) 103.8 488 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.36 (it with others. The recording does not exclusively work for \337ying, it records any changes to) 103.8 474 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the location and orientation of the model.) 103.8 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Before we start the recording and use the \337y viewer) 103.8 432 T
(, we will  reduce the amount of data in) 351.59 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the scene by using the subsets. A subset is created by selecting a number of components) 103.8 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and save that selection. Subsets can be used for removing components from the scene, but) 103.8 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(also for quick selection.) 103.8 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (W) 103.8 362 P
-0.21 (e\325ll create a subset of the already selected components. As we swith to it we can see how) 114.17 362 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(only those components are displayed. Now) 103.8 348 T
(, let\325) 309.66 348 T
(s swithc to the "main" subset.) 330.99 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This ability to easily turn on and of) 103.8 320 T
(f components improves not only performance, but is) 272.58 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(really bene\336cial for enhancing visual clarity and design investigation.) 103.8 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(FL) 103.8 264 T
(Y VIEWER and FLIGHT P) 118.03 264 T
(A) 261.17 264 T
(THS) 268.94 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(As I change over to the \337y viewer) 103.8 236 T
(, the model will be stationary while I'm moving relative) 266.28 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.18 (to it.  Increasing speed is done by using the left mouse button and as you can see, we\325re \337y-) 103.8 222 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing in the 3- dimensional space through the model.) 103.8 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (W) 103.8 180 P
-0.04 (e will now \337y through the assembly) 114.17 180 P
-0.04 (. Into the mouth of the intake manifold. The controls) 285.12 180 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a re simple, we always \337y in the direction of the mouse cursor) 103.8 166 T
(. Let\325) 401.42 166 T
(s \337y on  to the header) 426.76 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.36 (port and into the intake valve chamber) 103.8 152 P
-0.36 (. W) 285.61 152 P
-0.36 (e are now passing through the piston cylinder and) 301.61 152 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(down towards the oil pan. As we are turning around here at the bottom of the oil pan we) 103.8 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(can see how it is) 103.8 124 T
0 F
(not) 186.12 124 T
2 F
( completely lined up with the engine block.) 202.79 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(MODEL TREE) 103.8 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
71.4 744 541 744 2 L
0.9 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
541 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6-5) 526.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 432 612 504 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(FL) 0 -90 583.25 495 TF
(Y) 0 -90 583.25 482.19 TF
(-BIG) 0 -90 583.25 474.86 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
-0.25 (W) 103.8 698 P
-0.25 (e will later \336x this misalignment. But \336rst, I want to show you the Model tree. This is the) 114.17 698 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(same tree that is used in Pro/ENGINEER. W) 103.8 684 T
(e can expand and collapse branches. W) 318.14 684 T
(e can) 505.45 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(add columns for display of model parameters as well as modify and reor) 103.8 670 T
(ganize them.  The) 450.85 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(set of parameters that are available in Pro/FL) 103.8 656 T
(Y THROUGH come from the Pro/ENGI-) 318.89 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NEER models and is con\336gured prior to VRML export. Here, we will display weight and) 103.8 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(description.) 103.8 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The  ability to access engineering information like this in Pro/FL) 103.8 600 T
(Y) 413.92 600 T
(-THROUGH allows dis-) 421.25 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tribution of important model information beyound Pro/ENGINEER.) 103.8 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(SELECTION) 103.8 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.49 (The selection capabilities in Pro/FY) 103.8 530 P
-0.49 (-THROUGH are geared towards lar) 273.18 530 P
-0.49 (ge asseemblies. It is) 442.96 530 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ery easy to identify components, select one ore many of them and to review the selection) 103.8 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(made.) 103.8 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 103.8 474 T
(e\325ll start out by using the  Query select. As I select in an area of the screen all objects) 114.17 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (behind that point are put in the graphical query bin. Here, we can easily identify the objects) 103.8 460 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and make the correct selection. Y) 103.8 446 T
(ou can see how the selected components are not only) 263.22 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.44 (highlighted inthe main window) 103.8 432 P
-0.44 (, but are also identi\336ed in the Model T) 252.02 432 P
-0.44 (ree. I am also going to) 432.36 432 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.27 (open up an additional window) 103.8 418 P
-0.27 (, the selection viewer) 247.27 418 P
-0.27 (.  Here we can view the selected objects) 347.79 418 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(outside the context of the whole assembly) 103.8 404 T
(. W) 304.33 404 T
(e have the same capabilities in this window) 320.7 404 T
(,) 528.23 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(we can get in closer) 103.8 390 T
(, look at the models and determine their \336t, the detail and so forth.) 198.62 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( Let's now select the components we need to \336x. W) 103.8 362 T
(e\325ll do that by using the parameter we) 349.3 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(have listed in the Model T) 103.8 348 T
(ree.. If we enter the expression "weight>20000 grams", the sys-) 229.7 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tem automatically selects all components which comply with the criteria.  In this case the) 103.8 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(oil pan and the engine block are selected..) 103.8 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(RETRIEVE INT) 103.8 278 T
(O Pr) 190.6 278 T
(o/ENGINEER) 215.38 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(W) 103.8 250 T
(e now have selected the objects that we need in order to correct the misalignment. W) 114.17 250 T
(e) 520.45 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (will simply retrieve them into Pro/ENGINEER. In Pro/ENGINEER we work with the com-) 103.8 236 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(plete models and can make any changes necessary) 103.8 222 T
(. Important is that the changes we make) 344.61 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(in Pro/ENGINEER will be available for review in the context of the whole assembly) 103.8 208 T
(.) 509.29 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Let's move the oil pan to the center) 103.8 180 T
(. W) 271.61 180 T
(e can also add a hole for oil drainage and a plug for) 287.98 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the hole. W) 103.8 166 T
(e have now moved components, added features and added new components to) 158.5 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(our assembly) 103.8 152 T
(.) 166.68 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(UPDA) 103.8 110 T
(TE IN Pr) 136.24 110 T
(o/FL) 184.02 110 T
(Y) 207.59 110 T
(-THROUGH) 215.15 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.29 (These model changes are visible in Pro/FL) 103.8 96 P
-0.29 (Y THROUGH after we select Update. This func-) 306.14 96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tionality provides great ability to quickly make changes to models and see how these) 103.8 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(6-6) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SCRIPT) 506.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 542 744 2 L
0.9 H
2 Z
N
541 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(changes ef) 103.8 712 T
(fect the rest of the assembly) 154.56 712 T
(.) 288.08 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(LIGHTS AND ENVIRONMENT) 103.8 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(In Pro/FL) 103.8 656 T
(Y) 149.6 656 T
(-THROUGH, W) 156.94 656 T
(e also provide a set of tools to set your viewing environment.) 235.96 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.29 (Let\325) 103.8 642 P
-0.29 (s  now create a light source, a spotlight.  Y) 123.13 642 P
-0.29 (ou can see as it appears on the screen that we) 323.63 642 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.2 (can select it and move it around in the scene, move it along a plane and position it along an) 103.8 628 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(axis.  W) 103.8 614 T
(e can also change the direction of the light and control the light cone of the spot-) 142.5 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(light source. Let\325) 103.8 600 T
(s leave it in this position and let me now show you how we can edit the) 185.46 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(color of this light. W) 103.8 586 T
(e can move the color indicator on the color plate up here to give us a) 203.17 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(little bit of a  purple tone.  Y) 103.8 572 T
(ou can see how easily you can slide the color scheme to some-) 239.59 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(thing dif) 103.8 558 T
(ferent.  And to \336nalize this, W) 144.59 558 T
(e'll hide the actual icon for the light.  After you set) 289.61 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(up the number of light sources and established an environment, we've given you the tools) 103.8 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to save an environment and reload it for future use.) 103.8 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(FLIGHT P) 103.8 502 T
(A) 159.92 502 T
(TH REPLA) 167.7 502 T
(Y) 227.6 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Let\325) 103.8 474 T
(s now replay the \337ight path we created as we \337ew through the engine.) 123.13 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(SUMMAR) 103.8 446 T
(Y) 158.7 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
( In summary) 103.8 418 T
(, we have seen tools in pro/FL) 163.68 418 T
(Y THROUGH which can aid in lar) 307.46 418 T
(ge assembly) 475.21 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(design and in performing engineering design reviews. The product allows you to conduct) 103.8 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fast, real-time 3D graphical browsing of very lar) 103.8 390 T
(ge assemblies.  W) 336.19 390 T
(e have improved perfor-) 421.88 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mance by reducing the database size, speed up retrieval time into session and accelerated) 103.8 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(manipulation operations of the object once in session.) 103.8 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 103.8 334 T
(e provide a set of tools to view the model in dif) 114.17 334 T
(ferent ways, examiner) 340.93 334 T
(, walk thru and \337y) 446.75 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(viewing. These viewing tools enhances your design review and model inspection capabili-) 103.8 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.3 (ties of lar) 103.8 306 P
-0.3 (ge assemblies. W) 148.31 306 P
-0.3 (e\325ve also provided additional windows for viewing individual or) 230.4 306 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a group of selected objects. W) 103.8 292 T
(e have the tree tool for viewing the hierarchy and also to) 248.13 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(identify part names, parametrs  and select objects.  The ability to record and replay \337ight) 103.8 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(paths is a powerful functionality which will capture design review information, extend) 103.8 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(product information and demonstration capabilities.) 103.8 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (And lastly we\325ve seen  the bi-directional associativity and tight integration with Pro/ENGI-) 103.8 222 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NEER, allowing us to create a simpli\336ed representation of the selected parts and sub) 103.8 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(assemblies, bring them into Pro/ENGINEER, make model modi\336cations and have them) 103.8 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(update in Pro/FL) 103.8 180 T
(Y) 183.94 180 T
(-THROUGH.) 191.27 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-Roman
%%EOF
