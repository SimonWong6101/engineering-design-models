%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 6 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "7" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ADVANCED MILLING PICKS) 209.17 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(PICKS) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10-7) 521.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 108 612 180 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(MFG-MILL) 0 -270 591.33 111.71 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ADVANCED MILLING PICKS) 209.17 710.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(SETUP / PREPARATION) 72 681 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Bring everything into session by running the trail file \322setup18.txt\323) 108 653 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(SETUP / INTRODUCTION) 72 625 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({ncc}) 108 597 T
2 9 Q
(NC CHECK, DISPLAY, COLOR, RESTORE FILE,RUN) 137.78 597 T
2 12 Q
(/ INTRO / DONE/RETURN /) 349.79 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CONFIRM / DONE/RETURN) 108 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MFG SETUP / FIXTURE / ACTIVATE / VISE / DONE/RETURN / DONE/RETURN /) 108 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
({rr}) 108 541 T
2 9 Q
(VIEW, REPAINT, DONE/RETURN) 131.11 541 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(VOLUME ROUGHING SEQUENCE) 72 513 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(MACHINING / NC SEQUENCE / NEW SEQUENCE / DONE / TOOL / APPR WALLS) 108 485 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(START / END / WINDOW / DONE / "0_75in_rem" / DONE SEL / RETRIEVE /) 108 471 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("d_roughv" / DONE) 108 457 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CREATE WIND / "rough_all" / SKETCH / GEOM TOOLS / OFFSET EDGE / SEL) 108 429 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(LOOP / {select top plane of workpiece model} / REGENERATE / DONE / OKAY /) 108 415 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({define approach and exit walls from edges belonging to "rough_all" by picking all) 108 401 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(edges of the window} / DONE / {select "from_home" point on screen, twice}) 108 387 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
({vd}) 108 359 T
2 9 Q
(VIEW, ORIENTATION, DEFAULT, DONE/RETURN) 133.13 359 T
2 12 Q
( / PLAY PATH / DONE CL / DONE SEQ) 335.59 359 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
({vn}) 108 331 T
2 9 Q
(VIEW, NAMES) 133.13 331 T
2 12 Q
( / "chuck_key" / DONE-RETURN / MFG SETUP / MFG) 192.62 331 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(GEOMETRY / MILL SURFACE / UNBLANK / "chuck_key_surf" / DONE/RETURN /) 108 317 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE/RETURN) 108 303 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(TRAJECTORY MILLING SEQUENCE) 72 275 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(NC SEQUENCE / NEW SEQUENCE / TRAJECTORY / DONE / TOOL / DONE /) 108 247 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("0_375in_em" / DONE SEL / RETRIEVE / "d_traj" / DONE /) 108 233 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({select edges to form trajectory - the bottom edge of the vertical holder walls} / EDGE /) 108 205 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE / START HEIGHT / DONE / BNDRY CHAIN / {Select a quilt surface) 108 191 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("chuck_key_surf"} / FROM-TO / {select the points that will bound all the inside walls) 108 177 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the holder} / ACCEPT / DONE / FLIP / OKAY / LEFT / DONE / {specify the start) 108 163 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(height of the tool path by selecting the top flat surface that abuts the side surfaces of the) 108 149 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(holder} / SHOW / DONE/RETURN / {zoom into the cut motion}) 108 135 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ENDS / START / SPECIFY / DONE / {Adjust chain end using mouse} / EXT LENGTH) 108 107 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/ .5 / END / SPECIFY / DONE / {Adjust chain end using mouse} / EXT LENGTH / .5 /) 108 93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE/RETURN / PLAY CUT / TIME INCREMENT / ENTER /.5 / PLAY CUT /) 108 79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 1
%%Page: "8" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ADVANCED MILLING PICKS) 209.17 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(10-8) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PICKS) 511.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(DONE CUT / {customize the cut motion with an additional tool motion} / TOOL) 108 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MOTION / RETRACT / DONE SEQ) 108 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MFG SETUP / MFG GEOMETRY / MILL SURFACE / UNBLANK /) 108 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("chuck_key_bottom" / DONE/RETURN / DONE/RETURN) 108 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(3 AXIS CONVENTIONAL SURFACING SEQUENCE) 72 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(NC SEQUENCE / NEW SEQUENCE / CONVENTL SRF / DONE / TOOL / CHECK) 108 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SURFS / DONE / "0_1875_ball_cutter" / DONE SEL / RETRIEVE / "d_key_area" /) 108 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE / MILL SURFACE / DONE / SELECT SRF / "chuck_key_bottom" / OKAY /) 108 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SELECT ALL / SHOW / DONE/RETURN / {select surfaces on reference part to check) 108 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gouging against. "chuck_key_surf"} / DONE SEL / SHOW / DONE/RETURN) 108 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PLAY PATH / DONE CL / PREV GOTO / PREV GOTO / VIEW / LAYER DISP /) 108 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WORK / DONE SEL /) 108 502 T
0 F
({rr}) 220.99 502 T
2 9 Q
(VIEW, REPAINT, DONE/RETURN) 244.1 502 T
0 12 Q
( /) 378.09 502 T
2 F
(CL MEASURE /) 387.42 502 T
0 F
( {sd}) 469.43 502 T
2 9 Q
(VIEW,) 496.23 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(COSMETIC, SHADE, DISPLAY) 108 488 T
2 12 Q
( / CL MEASURE / CLEAR/INTF / {select first object, part) 230.5 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("0_1875_ball_cutter"} / {select second object} / SURFACE / {pick the surface directly) 108 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(underneath the tool tip} / DONE SEL / DONE/RETURN / DONE/RETURN / DONE /) 108 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE SEQ / VIEW / LAYER DISP / WORK / DONE SEL /) 108 446 T
0 F
({rr}) 408.31 446 T
2 9 Q
(VIEW, REPAINT, DONE/) 431.42 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RETURN) 108 434 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
({vn}) 108 407 T
2 9 Q
(VIEW, NAMES) 133.13 407 T
2 12 Q
( / BACK_ISO / {zoom into the area just machined} /) 192.62 407 T
0 F
({vd}) 449.79 407 T
2 9 Q
(VIEW,) 474.92 407 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ORIENTATION, DEFAULT, DONE/RETURN) 108 395 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
({vn}) 108 368 T
2 9 Q
(VIEW, NAMES) 133.13 368 T
2 12 Q
( / BACK_ISO / {zoom into the area just machined} /) 192.62 368 T
0 F
({vd}) 449.79 368 T
2 9 Q
(VIEW,) 474.92 368 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ORIENTATION, DEFAULT, DONE/RETURN) 108 356 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(MFG SETUP / MFG GEOMETRY / MILL SURFACE / BLANK / "rough_v_all" /) 108 343 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BLANK / "chuck_key_surf" / BLANK / "chuck_key_bottom" / UNBLANK /) 108 329 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("batt_hous_srf" / DONE/RETURN /) 108 315 T
0 F
({rr}) 286.45 315 T
2 9 Q
(VIEW, REPAINT, DONE/RETURN) 309.56 315 T
2 12 Q
( / DONE/RETURN) 443.55 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(3 AXIS CUTLINE SURFACING SEQUENCE) 72 287 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(NC SEQUENCE / NEW SEQUENCE / CONTOUR SRF / DONE / ALONGCUTLINE /) 108 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE / TOOL / END / DONE / "0_1875_ball_cutter" / DONE SEL / RETRIEVE /) 108 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("d_cutline" / DONE / MILL SURFACE / DONE / BLANK / "rough_v_all" /) 108 231 T
0 F
( {rr}) 477.58 231 T
2 9 Q
(VIEW,) 503.69 231 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(REPAINT, DONE/RETURN) 108 217 T
2 12 Q
( / SELECT SRF / "batt_hous_srf" / OKAY /) 213.99 217 T
0 F
({vn}) 429.46 217 T
2 9 Q
(VIEW, NAMES) 454.59 217 T
2 12 Q
( /) 514.08 217 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BATT_HOUS / SELECT ALL / SHOW / DONE/RETURN / DONE /) 108 203 T
0 F
({rr}) 448.32 203 T
2 9 Q
(VIEW,) 471.43 203 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(REPAINT, DONE/RETURN) 108 189 T
2 12 Q
( / INNER CUTLINE / DONE / DONE) 213.99 189 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({define start/end cutlines}) 108 161 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(TANGNT CHAIN / {pick bottom edge of surface} / DONE / DONE/RETURN / DONE) 108 147 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(TANGNT CHAIN / {pick top edge of surface} / DONE / DONE/RETURN / DONE /) 108 133 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(TANGNT CHAIN / {pick first compete chain above the start cutline} / DONE /) 108 119 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DEFINE / DONE / {pick all of the edges in the chain below the end cutline,) 108 105 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(individually} / DONE / DONE/RETURN / OKAY / SHOW / DONE/RETURN / SEL) 108 91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BY MENU / "core_work.prt" / "from_home") 108 77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 2
%%Page: "9" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ADVANCED MILLING PICKS) 209.17 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(PICKS) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10-9) 521.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 108 612 180 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(MFG-MILL) 0 -270 591.33 111.71 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(SEQ SETUP / CHECK SURFS / DONE / {select surfaces on reference part to check) 108 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gouging against. pick the top horizontal surfaces of the extract} / SHOW / DONE/) 108 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RETURN / DONE SEQ) 108 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CL DATA /) 108 642 T
0 F
({vd}) 169 642 T
2 9 Q
(VIEW, ORIENTATION, DEFAULT, DONE/RETURN) 194.12 642 T
2 12 Q
( / INPUT / "cutline.ncl") 396.59 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE/RETURN / DONE/RETURN /) 108 628 T
0 F
({rr}) 295.99 628 T
2 9 Q
(VIEW, REPAINT, DONE/RETURN) 319.1 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(MFG SETUP / MFG GEOMETRY / DONE/RETURN /) 108 600 T
0 F
( {nh}) 379.01 600 T
2 9 Q
(ENVIRONMENT, NO HIDDEN,) 407.81 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE-RETURN) 108 586 T
2 12 Q
( /MFG SETUP / FIXTURE / ACTIVATE / VISE / DONE SEL / DONE/) 171.99 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RETURN) 108 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(SETUP DRAWING DELIVERABLE) 72 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(MODE / DRAWING / SEARCH/RETR / "drill_core_fixture.drw" / VIEWS / DISP) 108 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MODE / TOOL PATH / SHOW PATHS /SEL BY MENU / "core_work.prt" / NAME /) 108 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("11: volume milling" / DONE/RETURN / QUIT WINDOW / CHANGEWINDOW /) 108 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({change back to the mfg window}) 108 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MFG SETUP / FIXTURE / ACTIVATE / VISE / DONE/RETURN /) 108 446 T
0 F
({hl}) 442.33 446 T
2 9 Q
(ENVIRONMENT,) 464.8 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(HIDDEN LINE, DONE-RETURN) 108 432 T
2 12 Q
(/ DONE/RETURN) 233.72 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(DEFINE 4 AXIS CONVENTIONAL SURF) 72 404 T
(ACING SEQUENCE) 293.78 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(MACHINING / NC SEQUENCE / NEW SEQUENCE / CONVENTL SRF / 4 AXIS /) 103.8 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE / T) 103.8 362 T
(OOL / ST) 153.58 362 T
(AR) 200.62 362 T
(T / END /DONE / 0_5IN_BEM / DONE SEL / RETRIEVE /) 216.56 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (d_4xconv / DONE / MILL SURF) 103.8 348 P
-0.32 (ACE / DONE / SELECT SRF / BARREL_SRF / OKA) 262.96 348 P
-0.32 (Y /) 522.65 348 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SELECT ALL / SHOW / DONE/RETURN) 103.8 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
({specify plane to which the tool axis will be parallel}) 103.8 308 T
2 12 Q
( / SEL BY MENU / CORE_WORK.PR) 317.54 308 T
(T /) 507.16 308 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DA) 103.8 294 T
(TUM / NAME / SIDE / DONE SEL / SELECT /) 119.8 294 T
2 10 Q
({select  "from_home" - twice} /) 356.8 294 T
2 12 Q
(DONE) 486.76 294 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SEQ / CL DA) 103.8 280 T
(T) 170.14 280 T
(A / INPUT / 4x_conv) 176.51 280 T
(.ncl /DONE/RETURN / DONE/RETURN / DONE/) 279.72 280 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RETURN) 103.8 266 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(CHANGE P) 72 238 T
(ARAMETERS OF SEQUENCE) 134.11 238 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(MODIFY /MOD NC SEQ / 5: CONVENTIONAL SURF) 103.8 210 T
(ACE MILLING / P) 379.23 210 T
(ARAME-) 471.79 210 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(TERS /) 103.8 196 T
2 10 Q
(\050change the STEP_OVER to .5\051 /) 142.48 196 T
2 12 Q
(DONE / DONE/RETURN / DONE/RETURN / CL) 278.3 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DA) 103.8 182 T
(T) 119.8 182 T
(A / NC SEQUENCE / 5: CONVENTIONAN SURF) 126.17 182 T
(ACE MILLING, OPERA) 376.27 182 T
(TION /) 497.93 182 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE CL / DONE OUTPUT / DONE/RETURN) 103.8 168 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(DEFINE GROOVING SEQUENCE ON TEXT GROOVE) 72 140 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.32 (MACHINING / NC SEQUENCE / NEW SEQUENCE /) 103.8 110.67 P
0 F
-0.32 ({rr}) 374.56 110.67 P
2 9 Q
-0.24 (VIEW, REPAINT, DONE/RETURN) 397.8 110.67 P
0 12 Q
-0.32 ( /) 531.3 110.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(GROOVING / DONE / T) 103.8 96 T
(OOL / DONE / 0_06IN_BEM / DONE SEL / RETRIEVE /) 226.9 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(D_TEXT / DONE /) 103.8 82 T
2 10 Q
(\050select text groove feature 2 \050GROOVE\051 in part "housing_core\051  /) 201.12 82 T
2 12 Q
(PLA) 465.97 82 T
(Y P) 487.53 82 T
(A) 504.77 82 T
(TH /) 512.1 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 3
%%Page: "10" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ADVANCED MILLING PICKS) 209.17 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(10-10) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PICKS) 511.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(DONE CL / DONE / DONE SEQ /) 103.8 712 T
0 F
({rr}) 275.78 712 T
2 9 Q
(VIEW, REPAINT, DONE/RETURN) 295.89 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(PLACE MANUF) 72 670 T
(ACTURING UDF) 159.43 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.33 (UTILITIES / GROUP / RETRIEVE /[traj_mill] / DONE / DONE / QUIT) 103.8 642 P
2 10 Q
-0.28 ( /) 453.11 642 P
2 12 Q
-0.33 ([0.80] / DONE /) 460.34 642 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SEL BY MENU / NAME / OP010) 103.8 628 T
( / SAME / \050) 272.97 628 T
2 10 Q
(select tool change point "from_home"\051 / \050select sur-) 328.97 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(face from which start plane will be measured.\051 /) 103.8 614 T
2 12 Q
(SAME / \050) 297.64 614 T
2 10 Q
(select edge, part of tangent chain of edges to be) 344.31 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(milled, the edge at the bottom of the front left-hand hole\051) 103.8 600 T
2 12 Q
( / DONE/RETURN / DONE / DONE/) 332.38 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RETURN / CL DA) 103.8 586 T
(T) 195.47 586 T
(A / NC SEQUENCE / 18: TRAJECT) 201.84 586 T
(OR) 380.96 586 T
(Y MILLING / DONE CL /) 396.97 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(VIEW / P) 103.8 572 T
(AN|ZOOM / \050zoom into the placement area\051 / DISPLA) 150.02 572 T
(Y / DONE CL / DONE /) 413.94 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE OUTPUT /) 103.8 556.67 T
0 F
({vd}) 196.79 556.67 T
2 9 Q
(VIEW) 222.41 556.67 T
(, ORIENT) 245.08 556.67 T
(A) 281.85 556.67 T
(TION, DEF) 287.35 556.67 T
(AUL) 329.68 556.67 T
(T) 347.34 556.67 T
(,  DONE/RETURN /) 352.18 556.67 T
0 12 Q
({rr}) 429.42 556.67 T
2 9 Q
(VIEW, REPAINT,) 453.04 556.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE/RETURN) 103.8 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(DEFINE 3 AXIS CONVENTIONAL SEQUENCE ON TRIGGER) 72 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(NC SEQUENCE / NEW SEQUENCE / CONVENTL SRF / DONE / T) 103.8 489 T
(OOL /) 445.91 489 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CHECK SURFS / DONE / 0_25IN_REM / DONE SEL / RETRIEVE / d_conv / DONE /) 103.8 475 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MILL SURF) 103.8 461 T
(ACE / DONE / SELECT SRF / TRIGGER_GRIP / OKA) 165.25 461 T
(Y / SELECT ALL /) 438.49 461 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SHOW / DONE/RETURN / DONE SEL / SHOW /) 103.8 447 T
2 10 Q
(\050select surface that is the top of the core, the) 354.12 447 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\337at horizontal surface\051 /) 103.8 433 T
2 12 Q
(DONE SEL / SHOW / DONE/RETURN / DONE SEQ / CL DA) 202.11 433 T
(T) 510.42 433 T
(A /) 516.8 433 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(INPUT / CONV) 103.8 417.67 T
(.NCL / DONE/RETURN / DONE/RETURN /) 180.91 417.67 T
0 F
({rr}) 405.24 417.67 T
2 9 Q
(VIEW, REPAINT, DONE/) 428.85 417.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RETURN) 103.8 403 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(DEFINE 2 1/2 AXIS PROFILING SEQUENCE AROUND TRIGGER PROTRUSION) 72 375 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(NC SEQUENCE /NEW SEQUENCE / PROFILE / DONE / T) 103.8 347 T
(OOL /DONE /) 402.58 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.2 (0_125IN_EM / DONE SEL /RETRIEVE / D_PROFILE / DONE / DONE /LOOP / \050) 103.8 333 P
2 10 Q
-0.17 (select a) 508.13 333 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(face, the surface that is the top of the trigger boss\051 /) 103.8 319 T
2 12 Q
(DONE SEL / DONE / SHOW / DONE /) 311.81 319 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RETURN) 103.8 305 T
2 10 Q
( /) 151.8 305 T
2 12 Q
(PLA) 159.58 305 T
(Y P) 181.14 305 T
(A) 198.38 305 T
(TH / DONE CL / DONE /DONE SEQ / DONE /RETURN) 205.71 305 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(REPLACE REFERENCE MODEL WITH F) 72 277 T
(AMIL) 301.13 277 T
(Y T) 332.69 277 T
(ABLE P) 351.47 277 T
(AR) 393.59 277 T
(T) 410.5 277 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(MFG MODEL / REPLACE / SEL BY MENU / HOUSING_CORE.PR) 103.8 249 T
(T /) 445.09 249 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\050select replacing instance from menu.\051) 103.8 235 T
2 12 Q
( / SQ_TRIGGER / DONE/RETURN / REGENERA) 257.37 235 T
(TE /) 506.03 235 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(AUT) 103.8 221 T
(OMA) 128.24 221 T
(TIC /DONE /) 154.91 221 T
2 10 Q
(\050verify last two tool paths\051 /) 223.24 221 T
2 12 Q
(CL DA) 337.11 221 T
(T) 371.45 221 T
(A /INPUT /) 377.82 221 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CONV_CHANGE.NCL / DONE/RETURN / OUTPUT / NC SEQUENCE / 9: PROFILE) 103.8 207 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.4 (MILLING / DONE CL / DONE / DONE OUTPUT /DONE/RETURN /) 103.8 191.67 P
0 F
-0.4 ({rr}) 446.98 191.67 P
2 9 Q
-0.3 (VIEW, REPAINT,) 470.12 191.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE/RETURN) 103.8 177 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(DEFINE 2 1/2 AXIS V) 72 149 T
(OLUME SEQUENCE T) 187.76 149 T
(O CLEAN HORIZONT) 312.9 149 T
(AL SURF) 435.36 149 T
(ACE) 485.47 149 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(MACHINING /NC SEQUENCE / NEW SEQUENCE / DONE /T) 103.8 121 T
(OOL /) 420.89 121 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(APPR W) 103.8 107 T
(ALLS / END / DONE / 0_5IN_EM / DONE SEL / RETRIEVE /D_VOLFLA) 146.81 107 T
(T /) 518.78 107 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.07 (DONE / SELECT VOL / \050) 103.8 93 P
2 10 Q
-0.06 (select mill volume\051) 231.09 93 P
2 12 Q
-0.07 ( / FLA) 308.19 93 P
-0.07 (T_OUTLINE / \050) 338.71 93 P
2 10 Q
-0.06 (select approach/exit walls, the) 417.21 93 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(walls facing the bottom left in the default view\051) 103.8 79 T
2 12 Q
( / QUER) 294.33 79 T
(Y SEL /REHIGHLIGHT / DONE SEL /) 335.67 79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 4
%%Page: "11" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(ADVANCED MILLING PICKS) 209.17 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(PICKS) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10-11) 516.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 108 612 180 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(MFG-MILL) 0 -270 591.33 111.71 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(SHOW / DONE/RETURN /) 103.8 712 T
2 10 Q
(\050select "from_home" for the tool's \336nal location\051 /) 242.46 712 T
2 12 Q
(PLA) 444.62 712 T
(Y P) 466.18 712 T
(A) 483.42 712 T
(TH /) 490.75 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE CL /) 103.8 696.67 T
0 F
({vn}) 164.8 696.67 T
2 9 Q
(VIEW, NAMES) 190.42 696.67 T
( /) 249.91 696.67 T
2 12 Q
(T) 256.92 696.67 T
(OP /) 264.03 696.67 T
0 F
({vd}) 288.7 696.67 T
2 9 Q
(VIEW, ORIENTATION, DEFAULT, DONE/RETURN) 314.33 696.67 T
0 12 Q
( /) 516.79 696.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(DONE SEQ /) 103.8 680.67 T
0 F
({rr}) 172.13 680.67 T
2 9 Q
(VIEW, REPAINT, DONE/RETURN) 195.74 680.67 T
2 12 Q
( / \050) 329.72 680.67 T
2 10 Q
(setup for \336nal views\051 /) 343.05 680.67 T
2 12 Q
(MFG SETUP / MFG) 435.54 680.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(GEOMETR) 103.8 666 T
(Y / MILL VOLUME / BLANK / BA) 161.14 666 T
(TT_HOUS_SRF / BLANK /) 338.12 666 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BARREL_SRF / BLANK / TRIGGER_GRIP / BLANK / FLA) 103.8 652 T
(T_OUTLINE / DONE/) 405.15 652 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RETURN / DONE/RETURN /) 103.8 638 T
0 F
({rr}) 255.13 638 T
2 9 Q
(VIEW, REPAINT, DONE/RETURN) 278.24 638 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(DEFINE DRILLING SEQUENCE) 72 610 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(NC SEQUENCE / NEW SEQUENCE / HOLEMAKING / DONE / DONE /) 103.8 582 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.44 (T) 103.8 568 P
-0.44 (OOL / ST) 110.92 568 P
-0.44 (AR) 157.08 568 P
-0.44 (T / END / DONE / 0_21IN_DR / DONE SEL / RETRIEVE / d_drill / DONE) 173.03 568 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/) 103.8 554 T
2 10 Q
(\050de\336ne hole set\051 /) 110.14 554 T
2 12 Q
(THRU ALL / DONE / BY DIAMETER / 0.21000 / DONE SEL / DONE) 182.35 554 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (SEL / DONE/RETURN / DONE / DONE/RETURN /) 103.8 540 P
2 10 Q
-0.25 (\050select a "from_home" for the tool's original) 362.68 540 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and ending location\051 / \050verify tool path\051 /) 103.8 526 T
2 12 Q
(PLA) 269.89 526 T
(Y P) 291.45 526 T
(A) 308.68 526 T
(TH / TIME INCREMENT / ENTER / [.5] /) 316.02 526 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DONE CL / DONE / DONE SEQ / DONE/RETURN /) 103.8 510.67 T
0 F
({rr}) 369.78 510.67 T
2 9 Q
(VIEW, REPAINT, DONE/RETURN) 393.39 510.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(BIG CHANGE) 72 482 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(MODE / ASSEMBL) 103.8 454 T
(Y / SEARCH-RETR / IN SESSION / DRILL.ASM /VIEW /) 202.61 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.08 (P) 103.8 440 P
-0.08 (AN|ZOOM /) 109.37 440 P
2 10 Q
-0.07 (\050zoom into the area on the barrel that is going to get longer\051 /) 173.6 440 P
2 12 Q
-0.08 (REGENERA) 419.31 440 P
-0.08 (TE /AUT) 481.98 440 P
-0.08 (O-) 527.34 440 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MA) 103.8 426 T
(TIC / ENTER / MOT) 121.8 426 T
(OR_TYPE / DONE SEL /) 224.91 426 T
2 10 Q
(\050enter "2" for commercial version\051) 353.92 426 T
2 12 Q
( / [2] /) 492.04 426 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050) 103.8 412 T
2 10 Q
(progress through assemblies, regenerating...\051 /) 107.8 412 T
2 12 Q
(CHANGEWINDOW / \050) 294.7 412 T
2 10 Q
(change to the mold window\051) 410.67 412 T
2 12 Q
( /) 525.1 412 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(REGENERA) 103.8 398 T
(TE / AUT) 166.46 398 T
(OMA) 214.91 398 T
(TIC /) 241.57 398 T
0 F
({nh}) 270.24 398 T
2 9 Q
(ENVIRONMENT) 296.04 398 T
(, NO HIDDEN,) 361.36 398 T
(DONE/RETURN) 420.1 398 T
2 12 Q
( /) 483.59 398 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (CHANGEWINDOW /) 103.8 384 P
2 10 Q
-0.21 (\050change to the mfg window\051 /) 215.28 384 P
2 12 Q
-0.25 (REGENERA) 335.13 384 P
-0.25 (TE /AUT) 397.8 384 P
-0.25 (OMA) 442.99 384 P
-0.25 (TIC / DONE /) 469.66 384 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (\050you are going to have to talk for a while here...\051 / \050display change to tool path\051 / CL DA) 103.8 370 P
-0.25 (T) 522.22 370 P
-0.25 (A) 528.59 370 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/ NC SEQUENCE / 1: VOLUME MILLING / FILE / DONE / ADV_CH_END / DONE) 103.8 356 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(OUTPUT / NC CHECK / COLOR / REST) 103.8 342 T
(ORE FILE / RUN /ADV_CH_END / DONE/) 309.26 342 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RETURN / CONFIRM /) 103.8 328 T
2 10 Q
(\050switch to drawing mode to show change\051) 225.14 328 T
2 12 Q
(/ MODE / DRA) 395.39 328 T
(WING /) 470.77 328 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.55 (SEARCH-RETR / DRILL_CORE_FIXTURE.DR) 103.8 314 P
-0.55 (W /SET MODE / VIEWS / DISP MODE) 343.05 314 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/ T) 103.8 300 T
(OOL P) 117.25 300 T
(A) 150.48 300 T
(TH / SHOW P) 157.81 300 T
(A) 227.04 300 T
(THS / SEL BY MENU / CORE_WORK.PR) 234.37 300 T
(T / NAME / 10:) 446.66 300 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(VOLUME MILLING / VIEW / P) 103.8 286 T
(AN|ZOOM /) 264.33 286 T
2 10 Q
(\050zoom into tool path display\051) 328.73 286 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 5
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 5
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-Roman
%%EOF
