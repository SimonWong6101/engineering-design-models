%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 4 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(PIPING SCRIPT) 254.08 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12-1) 521.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 541 744 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
576 468 612 540 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(PIPING) 0 -270 590.58 482.61 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(PIPING SCRIPT) 254.08 710.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(SUMMAR) 274.22 695 T
(Y) 329.12 695 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(This demonstration illustrates routing several classes of pipes through an assembly) 103.8 667 T
(.  V) 500.32 667 T
(ari-) 516.65 667 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ous routing techniques and corner types are utilized.  Pipe dimensions and routing refer-) 103.8 653 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ences are modi\336ed, \336ttings are inserted, and pipes rerouted based on design changes.) 103.8 639 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Complete design \337exibility is demonstrated by replacing components and modifying) 103.8 625 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dimensions to see all pipes update.  Piping information such as required line stock, bend) 103.8 611 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(locations, drawings, and BOM's are generated.) 103.8 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(INTRODUCTION) 72 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Pro/PIPING allows you to interactively design and route pipes within your 3D Pro/ENGI-) 103.8 541 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NEER assembly) 103.8 527 T
(, thereby eliminating the need for a costly physical mockup.  Pro/PIPING) 182.02 527 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shares the common characteristics of all Pro/ENGINEER modules by being parametric,) 103.8 513 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(feature-based, and fully associative.  Speci\336cally:) 103.8 499 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.52 (Pro/PIPING captures all parameters associated with piping design, such as bend radii, outer) 103.8 471 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(diameter) 103.8 457 T
(, the type of corner) 145.31 457 T
(.  These parameters can be easily changed to modify your pip-) 235.62 457 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing design and displayed in dynamic report tables in drawings.) 103.8 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.49 (Pro/PIPING also has intelligent routing features such as "go through this hole", "follow this) 103.8 415 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(edge until you hit a certain wall", or "follow an existing pipe for a speci\336ed distance.") 103.8 401 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(These tools allow you to very quickly route complex pipes without having to provide 3D) 103.8 387 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(coordinate locations for bend locations, typical among second generation CAD systems.) 103.8 373 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Finally) 103.8 345 T
(, Pro/PIPING allows the piping designers to work concurrently) 137.03 345 T
(.  Y) 438.55 345 T
(ou will see me) 455.02 345 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(routing pipes interactively through the Pro/ENGINEER assembly) 103.8 331 T
(.  As other groups make) 417.66 331 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(changes to their designs, my work will always be updated correctly) 103.8 317 T
(, saving considerable) 425.96 317 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(rework common when using traditional CAD tools.) 103.8 303 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pro/PIPING also provides very speci\336c functionalities for the hydraulic engineer) 103.8 275 T
(.  First of) 491.41 275 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(all, Pro/PIPING can work with either rigid pipes \050such as steel tubing\051 or \337exible pipes) 103.8 261 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050such as a rubber hose\051.  W) 103.8 247 T
(e have many dif) 233.79 247 T
(ferent corner types for rigid pipes, including) 310.56 247 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(bends, \336ttings, and miter cut corners.  Pro/PIPING provides deliverables such as the bend) 103.8 233 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (locations for a tube bending machine, the required stock length for every line stock in your) 103.8 219 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(assembly) 103.8 205 T
(, and the bill of materials for your piping assembly) 147.68 205 T
(.) 390.21 205 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In today's demonstration, we will be routing pipes and hoses in the cooling system of a) 103.8 177 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(window air conditioner) 103.8 163 T
(.  First we'll route the dischar) 215.12 163 T
(ge tube between the compressor and) 354.72 163 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the condenser) 103.8 149 T
(.  Then we'll route the capillary tube between the condenser and the evapora-) 169.45 149 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tor and \336nally the \337exible hose between the compressor and the pressure relief collection) 103.8 135 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(bottle.  As we do this, you will see how Pro/PIPING allows me to very intuitively and) 103.8 121 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(quickly route these pipes in my assembly) 103.8 107 T
(.) 301.01 107 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(PIPING SCRIPT) 254.08 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(12-2) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SCRIPT) 506.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 541 744 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(DISCHARGE TUBE) 72 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(First, let's get started on the dischar) 103.8 698 T
(ge tube.  The Pro/ENGINEER tools for working with) 273.39 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lar) 103.8 684 T
(ge assemblies are very important when working with piping, since pipes are often used) 116.24 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to connect equipment which lies in dif) 103.8 670 T
(ferent design subassemblies.  Here, I'll use the Sim-) 287.57 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pli\336ed Representation functionality to include only the assembly components I need to) 103.8 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(route the pipe.  Simpli\336ed Representation functionality makes it possible for me to work) 103.8 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.07 (with very lar) 103.8 628 P
-0.07 (ge assemblies, since I only need to bring the geometry I will actually be work-) 164.76 628 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.11 (ing with into memory) 103.8 614 P
-0.11 (.  I can also use Simpli\336ed Reps to work with a simple model instead) 207.02 614 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of a complex one, say replacing the compressor with its outer envelope, for example.  In) 103.8 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this case, I would be able to see where I need to route my pipes without having the whole) 103.8 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(compressor in memory) 103.8 572 T
(.  Now with a few simple picks, I've included just the compressor) 213.67 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(assembly) 103.8 558 T
(, the condenser) 147.68 558 T
(, and the piping connection assembly in my dischar) 219.52 558 T
(ge simpli\336ed) 465.61 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(rep.) 103.8 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0 (Notice that I have set up my assembly structure to have all the piping located in one subas-) 103.8 516 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (sembly) 103.8 502 P
-0.24 (.  This subassembly in turn contains lower level subassemblies for the piping within) 137.69 502 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the condenser and evaporator) 103.8 488 T
(, as well as a  subassembly for the pipes which connect com-) 244.27 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (ponents.  I could have used any number of assembly structures appropriate for my product.) 103.8 474 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Now I'll enter the piping environment and create the dischar) 103.8 446 T
(ge tube.  Pro/PIPING, uses) 392.02 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.4 (simple, intuitive point-and-click routing techniques which capture your design intent rather) 103.8 432 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(than using a traditional point-to-point method.  In this case, the pipeline is parametrically) 103.8 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(related to this \336tting and will always pass through the center) 103.8 404 T
(.  The connect routing feature) 392.45 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (provides a quick way to route and modify between two locations.  Making a solid pipe part) 103.8 390 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.6 (referencing the pipe line allows me to calculate mass properties, check for interference, etc.) 103.8 376 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(I can also obtain piping-speci\336c information, such as bend location information from the) 103.8 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pipe line and store it for use in a drawing table for use in manufacturing the bent tube.) 103.8 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(CAPILLAR) 72 320 T
(Y TUBE) 134.24 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Although we just routed a complete pipe line, it isn't always necessary to  route an entire) 103.8 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pipe line at once.  Here I have the paritally routed capillary tube, which I started with only) 103.8 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the connection subassembly in memory) 103.8 278 T
(.  Since this tube will connect the condenser and) 293 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(evaporator) 103.8 264 T
(, it will be passing near many other components.  I want to \336nish the routing) 154.63 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(while viewing the relevent portions of the top level assembly) 103.8 250 T
(.  I will use a simpli\336ed rep) 395.99 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.55 (which I created previously) 103.8 236 P
-0.55 (, containing only the components important for routing this pipe.) 229.01 236 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Using intelligent routing features, I can make use of the work I did in routing this suction) 103.8 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tube, as well as capture the design intent of having the pipes run next to each other) 103.8 208 T
(, by) 499.58 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (specifying that this pipe follow the other for a given section.  Note that it is simple to create) 103.8 194 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.07 (pipe segments separately and then connect them later) 103.8 180 P
-0.07 (.  In addition to the automatic routing) 358.25 180 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (techniques, I can create individual extensions, capturing design intent by referencing edges) 103.8 166 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and surfaces to insure of) 103.8 152 T
(fsets and directions will always re\337ect the composition of the) 220.88 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(assembly) 103.8 138 T
(.) 147.68 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pro/Piping allows me to check to see that my pipe line is valid and can be created physi-) 103.8 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (cally) 103.8 96 P
-0.21 (.  I see that I have exceeded the maximum allowable length for the line stock speci\336ed) 126.35 96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.09 (for this pipe line.  First I will see how long the segment in violation is.  Notice that the cap-) 103.8 82 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(PIPING SCRIPT) 254.08 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12-3) 521.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 541 744 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
576 468 612 540 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(PIPING) 0 -270 590.58 482.61 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
-0.2 (illary pipe line is in two sections.  There was a straight-break \336tting inserted here.  The seg-) 103.8 712 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ment in violation is 46 inches long.  Now let's check the line stock parameter \336le for this) 103.8 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.3 (piping segment.  Here in the line stock \336le we \336nd the parameters which determine the size) 103.8 684 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and shape of the piping solid, like outer diameter and wall thickness.  I can specify which) 103.8 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(types of corners and which bend radii will be used for this line stock.  For example, if a) 103.8 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (material were too brittle, I would not allow bent corners.  These parameters here at the bot-) 103.8 642 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tom are used to verify that the piping solid can actually be manufactured with the current) 103.8 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(routing.  These parameters are entered by the user so they can re\337ect the properties of the) 103.8 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.48 (piping material for your application.  Notice that the maximum overall length parameter for) 103.8 600 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this line stock is 42 inches.  I could correct this violation in any number of ways.  For) 103.8 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(example, I could change my routing or select a dif) 103.8 572 T
(ferent line stock.  In this case, I want to) 344.87 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(insert a \336tting here at this corner) 103.8 558 T
(.  As with all intelligent, parametric features, I can easily) 259.11 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(modify those used to create the pipe line.) 103.8 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(So far I have routed pipes to pre-assembled \336ttings, I can also insert \336ttings after the pipe) 103.8 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(line is made.  I will modify this corner type to be a "\336tting" \050I could have made it a miter) 103.8 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.11 (cut as well\051 and then insert a corner \336tting.  Now when I check my pipe line for violations,) 103.8 488 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(I see there are no problems.  A company can easily set up libraries of commonly used \336t-) 103.8 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tings and line stocks, to reuse the information in multiple designs.  Fittings may also be) 103.8 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(selected from the PTC Pipe Fitting Library) 103.8 446 T
(, which contains over a thousand SAE ANSI) 309.01 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(standard \336ttings that can be used in your piping assemblies.) 103.8 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(As I make the pipe line solid, I see that the system recognizes that one piping segment) 103.8 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(already has a solid and that the corner \336tting has broken the pipe line at the corner) 103.8 390 T
(, requir-) 497.24 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing two new solids.) 103.8 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.35 (I'll insert an end \336tting to \336nish the routing of the capillary tube.  Note that I can control the) 103.8 348 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction and orientation of the \336tting.  The bene\336t of using \336ttings in Pro/PIPING is that) 103.8 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the pipes understand where the \336ttings are and know how to trim the pipes to the correct) 103.8 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.27 (penetration depth within each of the \336ttings.  Now watch as the solid pipe is cut back to the) 103.8 306 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(correct position with respect to the \336tting entry port.) 103.8 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When I originally routed the pipe line, I ran it right through the evaporator shroud.  I need) 103.8 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to create a hole in the shroud and assemble a grommet around the pipe.  Since we do this) 103.8 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(many times in our designs, we have created a user de\336ned feature which we can reuse on) 103.8 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (many designs to save time and insure consistency) 103.8 222 P
-0.26 (.  Piping geometry can be referenced, just) 339.48 222 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(as any geometry in Pro/ENGINEER.  Note the \337anged ends added to the evaporator tubes) 103.8 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(here and remember the point we created to route the capillary tube using the edge of the) 103.8 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(solid.) 103.8 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(So far) 103.8 152 T
(, we've seen the routing of two pipes using very intuitive and intelligent commands) 132.31 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.14 (like follow pipe and connect between ports.  W) 103.8 138 P
-0.14 (e've seen the ability to check that we have a) 328.65 138 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.47 (valid routing scheme using the check pipe functionality and generated bend information for) 103.8 124 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (a pipe line.  W) 103.8 110 P
-0.13 (e've shown the ability to insert \336ttings in a pipe line and have the solid pipes) 172.63 110 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(trim back automatically to those \336ttings.  Finally) 103.8 96 T
(, we've shown that piping solids can be) 337.03 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(referenced by other Pro/ENGINEER features for size and placement.) 103.8 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(PIPING SCRIPT) 254.08 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(12-4) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SCRIPT) 506.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 541 744 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(PIPING DRA) 72 698 T
(WING) 141.66 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.01 (Pro/PIPING provides important information about the piping design, available at any time) 103.8 684 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(during the design cycle.  T) 103.8 670 T
(ypical information provided includes the amount of line stock) 230.94 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (required for each of the pipes in the air conditioner) 103.8 656 P
-0.21 (, a piping bill of material, and bend loca-) 345.7 656 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tion information used to drive a tube bending machine.  Since these pipes are Pro/ENGI-) 103.8 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (NEER solid parts, I can create a detailed drawing of these pipes and show their dimensions) 103.8 628 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(or generate a \336nite element mesh for analysis purposes.) 103.8 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (Here I have a drawing of the piping sub-assembly) 103.8 586 P
-0.28 (.  If we look at the BOM report table, you) 340.08 586 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(can see the piping we just created.  The second table is a list of parts and their quantity in) 103.8 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the assembly) 103.8 558 T
(.  I can add balloons to specify which \336ttings and piping solids correspond to) 165.35 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the entries in the table.  Drawings can be created for subassemblies and individual piping) 103.8 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (solids, as with other Pro/ENGINEER components.  Finally) 103.8 530 P
-0.24 (,  note that the bend information) 384.35 530 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.12 (I created in the assembly for the dischar) 103.8 516 P
-0.12 (ge tube is shown here in a report table.  I can make) 294.33 516 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.46 (drawings of individual pipes in an assembly using simpli\336ed reps and show information for) 103.8 502 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(individual pipes by \336ltering the contents of Pro/REPOR) 103.8 488 T
(T tables.) 371.42 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(FLEXIBLE HOSE) 72 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.02 (When I return to my piping assembly) 103.8 432 P
-0.02 (, I \336nd that the design has progressed and a new com-) 282.23 432 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ponent has been added.  At this point, my design intent is to route a \337exible hose between) 103.8 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (the compressor relief valve and the collector bottle yet allow enough room in the length of) 103.8 404 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.27 (the hose so that the collector bottle can be disassembled without having to remove the com-) 103.8 390 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pressor) 103.8 376 T
(.  Flexible hoses can be either free or \336xed length in Pro/PIPING.  If I had used a) 137.8 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(free length hose, it would update to the minimum necessary length to complete its routing) 103.8 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(path, updating when referenced components move.) 103.8 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(REPLACE COMPRESSOR ASSEMBL) 72 320 T
(Y) 276.25 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.26 (Now that the design is almost complete, we \336nd that we must convert this product to a new) 103.8 306 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(coolant due to new enviornmental regulations.  The new coolant is not as ef) 103.8 292 T
(\336cient, so we) 466.86 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(will need a lar) 103.8 278 T
(ger compressor) 171.9 278 T
(.  At our company) 244.88 278 T
(, we know how to interchange dif) 331.09 278 T
(ferent) 491.84 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(components that have common functions.  W) 103.8 264 T
(e can incorporate our design rules into Pro/) 320.48 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ENGINEER and let the system interchange dif) 103.8 250 T
(ferent compressors automatically) 328.21 250 T
(.  This) 486.73 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(enables fast, ef) 103.8 236 T
(\336cient design and product modi\336cations without losing any of the ef) 175.22 236 T
(fort) 502.99 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(invested in other components.  In this case, we see that all of the piping now shows in its) 103.8 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(new con\336guration.  As the piping updates to its new position, we see that there are a few) 103.8 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(new interferences.) 103.8 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(I can automaticaly locate all interferences using the Pro/ENGINEER information tools.) 103.8 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.52 (Locating and correcting interferences before building the actual product saves money) 103.8 152 P
-0.52 (, time,) 507.71 152 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (and ef) 103.8 138 P
-0.28 (fort by eliminating costly errors in the design.  Our customers are designing products) 132.96 138 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (that \336t perfectly the \336rst time, eliminating costly ECOs.  W) 103.8 124 P
-0.06 (e see there are three basic areas) 386.86 124 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of interference here.  T) 103.8 110 T
(o correct them we will simply modify the parametric features we) 213.24 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(used to create the pipes.  First we'll pull back the capillary tube away from the evaportor) 103.8 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shroud.  Next we will adjust the capillary tube to run along the other side of the suction) 103.8 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(PIPING SCRIPT) 254.08 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12-5) 521.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 541 744 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
576 468 612 540 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(PIPING) 0 -270 590.58 482.61 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
-0.29 (tube.  Finally) 103.8 712 P
-0.29 (, we'll adjust the length of the \337exible hose.  W) 166.1 712 P
-0.29 (ith these few modi\336cations, we) 388.82 712 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (have updated the original design to re\337ect the new changes.   Let\325) 103.8 698 P
-0.28 (s watch the pipes update.) 415.37 698 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Notice that the UDF grommet follows to the new location of the pipe through the shroud.) 103.8 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(FINAL DISCUSSION) 72 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(W) 103.8 642 T
(e have created and routed rigid pipes and \337exible hoses in a 3D assembly) 114.17 642 T
(,  by using sim-) 464.99 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ple mouse picks and intuitive routing commands.  Fittings were applied at ends, for sup-) 103.8 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0 (port, and at corners.  A problem in the routing was identi\336ed and corrected and line stocks) 103.8 614 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(were used to control the creation of solid pipes.  Engineering components were standard-) 103.8 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ized by using UDFs, libraries for \336ttings and line stocks, and family tables of piping) 103.8 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (assemblies.  Piping deliverables such as bend information, pipe length, and drawings were) 103.8 572 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(created and updated to re\337ect changes in the design.  Although signi\336cant modi\336cations) 103.8 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(were made to the design, very few changes were required to update the piping to the new) 103.8 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(con\336guration.) 103.8 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (This assembly now provides an exact BOM and amount of raw material for cost estimation) 103.8 502 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.44 (and purchasing for the piping for this product, without building a prototype.  The fact that it) 103.8 488 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (is easy to update piping to re\337ect design changes allows the piping design to proceed at the) 103.8 474 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (same time as the main design.  This is truly concurrent engineering, providing time to opti-) 103.8 460 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mize the piping and integrate it into the overall product.) 103.8 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Compare this with the typical practice of designing the piping for the product using 2D) 103.8 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(drawings.  After the product is \336nalized, a 2D drawing is generated.  The pipes for the) 103.8 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(product are drawn in fairly quickly) 103.8 390 T
(, with the expectation that the drawing will be about) 270.65 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60% accurate.  Extra raw materials are ordered "just in case", and the "kit" is delivered to) 103.8 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the shop \337oor) 103.8 362 T
(, where any interferences or other problems must be dealt with on-the-\337y) 169.32 362 T
(.) 519.13 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (Imagine trying to use this elevation drawing to determine if there were any interferences in) 103.8 348 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this assembly!) 103.8 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Using Pro/PIPING, the piping in your design is accurate, providing accurate raw material) 103.8 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(requirements, drawings, and an interference-free, valid design, saving you money and) 103.8 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(allowing you to optimize the piping design.) 103.8 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(PIPING SCRIPT) 254.08 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(12-6) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SCRIPT) 506.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 541 744 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-Roman
%%EOF
