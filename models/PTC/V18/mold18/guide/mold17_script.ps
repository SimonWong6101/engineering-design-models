%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 6 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(MOLDESIGN SCRIPT) 235.02 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 -208 1000 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22-1) 521.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 504 612 576 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(   MOLD) 0 -270 594.05 513.6 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(MOLDESIGN SCRIPT) 235.02 710.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(SUMMAR) 274.22 681 T
(Y) 329.12 681 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.04 (W) 150 653 P
-0.04 (elcome to today\325) 160.37 653 P
-0.04 (s demonstration of Pro/MOLDESIGN.  In this demonstration,) 240.29 653 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(I will  show  how Pro/MOLDESIGN extends Pro/ENGINEER functionality into the mold) 103.8 639 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (maker's environment.  This demonstration details how deliverables can be linked to the sin-) 103.8 625 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gle product model, so that changes in the design part can be realized simultaneously in all) 103.8 611 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(associated deliverables.  Multiple representations are used to display various stages in the) 103.8 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mold design process.) 103.8 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (In the conceptual design phase, a 16 X 26 D-M-E Standard A-series mold base is) 150 569 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(chosen and retrieved from a library for the drill housing part.  Pro/ENGINEER allows the) 103.8 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mold maker to begin sizing and documenting the mold base in the beginning of the design) 103.8 541 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.36 (process.  Next, shrinkage is applied to the reference model that has been assembled into the) 103.8 527 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (insert of the A and B plates.  Using the integrated solver) 103.8 513 P
-0.05 (, I was able to get a rough approxi-) 372.76 513 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mation of the runner system sizing and placement. I created a parting surface that was) 103.8 499 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(associatively linked to the surfaces of the part itself.   I created our core and cavity mold) 103.8 485 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inserts, and assembled the core insert  into my moldbase.  The initial design steps of an) 103.8 471 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ejection system are performed.) 103.8 457 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(INTRODUCTION) 72 429 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Hello, my name is [                 ], and I would like to welcome you to a demonstration of) 103.8 415 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pro/MOLDESIGN an optional module of Pro/ENGINEER's family of mechanical design) 103.8 401 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(automation tools.  I'm here to show the bene\336ts of Pro/MOLDESIGN, a concurrent) 103.8 387 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(engineering tool, that allows engineers and mold designers to signi\336cantly improve the) 103.8 373 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mold design process.) 103.8 359 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( T) 103.8 331 T
(raditionally) 113.71 331 T
(, engineers \336nalize a design and this design is then given to the mold design-) 168.26 331 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ers to create the mold.  As you can imagine, changes to the design at this stage are very) 103.8 317 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(expensive.  Pro/MOLDESIGN allows engineers and mold designers to work concurrently) 103.8 303 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(creating better molds faster and cheaper) 103.8 289 T
(.) 294.74 289 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(I want to point out three characteristics of Pro/ENGINEER and Pro/MOLDESIGN that) 103.8 261 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(allow our customers to realize tremendous gains in productivity and quality) 103.8 247 T
(.  First,) 465.65 247 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pro/ENGINEER part designs are based on a set of dimensions or parameters.  If I modify) 103.8 233 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(these dimensions the part automatically updates to re\337ect the changes.  For example, if I) 103.8 219 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(modify the diameter of the barrel of this drill housing the related features and geometry) 103.8 205 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(will automatically update.  This capability is important for Pro/MOLDESIGN because the) 103.8 191 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mold design is based directly of) 103.8 177 T
(f of the single product model. Second, Pro/ENGINEER) 256.57 177 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(uses features throughout the engineering process to design a product.  These  features are) 103.8 163 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(intuitive and easy to use.  The design commands selected are  similar to what you would) 103.8 149 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tell a machinist to fabricate the part.  For  example, to create these holes through this drill) 103.8 135 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(housing part; I select  create "Hole, Through All" and give it a diameter and location and) 103.8 121 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the holes are created.  In mold design features such as draft and shrinkage are available to) 103.8 107 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the mold maker) 103.8 93 T
(. Third, Pro/ENGINEER enables you to work in a concurrent engineering) 178.46 93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (environment in which all team members contribute to the design simultaneously) 103.8 79 P
-0.02 (.  Because) 488.09 79 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(MOLDESIGN SCRIPT) 235.02 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(22-2) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SCRIPT) 506.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
-0.38 (all applications and deliverables are based on a single product model, a change made at any) 103.8 712 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(point in the design process is propagated throughout all of your deliverables. W) 103.8 698 T
(e call this) 485.12 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(capability full associativity) 103.8 684 T
(.  In Pro/MOLDESIGN, the mold impression geometry is asso-) 233.02 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ciatively linked to the initial part design.  As a result, any changes made to the part are) 103.8 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(re\337ected in the mold tooling and documented in the drawings. All of the deliverables such) 103.8 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.08 (as drawings, bills of material, and manufacturing toolpaths update to re\337ect changes in the) 103.8 642 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(single product model.) 103.8 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.1 (In today's demonstration, I will start the drawing of this 16 X 26 D-M-E Standard A-series) 103.8 600 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mold base.  I will assemble the drill housing part into the insert of the A and B plates and) 103.8 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(apply shrinkage to the part.  Then to verify the runner system, a mold-\336lling analysis pro-) 103.8 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.08 (cedure is conducted.  I design the A and B cavities of my mold and begin creating the ejec-) 103.8 558 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tion system for the molded part.  Lastly) 103.8 544 T
(, I'll make some lar) 292.34 544 T
(ge changes to the drill housing) 383.94 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (part and show every application and deliverable update.  On the screen in front of us is the) 103.8 530 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16 X 26 D-M-E Standard A-series mold base in the lower main window) 103.8 516 T
(, the drill housing) 448.97 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(part in the upper right window) 103.8 502 T
(, and the drawing of the mold base in the upper left window) 249.34 502 T
(.) 535.51 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(DRA) 72 460 T
(WING) 96.66 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Realizing that a conceptual design meeting will take place in approximately four hours, I) 103.8 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(want to quickly size up this drill housing part design given to me this morning from our) 103.8 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(engineering department.  I know that engineering wants to create two of these left drill) 103.8 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.19 (housing parts at a time, so I've chosen a 16 X 26 D-M-E Standard A-series mold base.  I've) 103.8 404 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (started the detailed drawings of this mold base to have some initial information in this con-) 103.8 390 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.14 (ceptual design meeting that can be used for cost estimates.  Notice that this drawing has an) 103.8 376 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(associatively-linked bill of materials table that itemizes the components of the mold base) 103.8 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.39 (assembly) 103.8 348 P
-0.39 (.  On the second sheet of this drawing, I have displayed the moldbase in storybook) 147.68 348 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format showing the location of the insert in the A and B plates.) 103.8 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(DESIGN P) 72 306 T
(AR) 127.45 306 T
(T) 144.36 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.32 (Upon closer inspection of this drill housing part, notice the rounds, holes, slots, and bottom) 103.8 292 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lip.  W) 103.8 278 T
(ith Pro/MOLDESIGN, I will be directly referencing these features in the single) 136.32 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(product model to create the core and cavity geometry of my mold.  It appears engineering) 103.8 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(has designed an attractive home version of this drill housing part.) 103.8 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(MOLD MODEL) 72 222 T
3 F
(\050INSERTS) 160.67 222 T
1 F
(SIMPLIFIED REPRESENT) 217.68 222 T
(A) 349.78 222 T
(TION\051) 356.66 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Using an assembly management technique within Pro/ENGINEER called simpli\336ed repre-) 103.8 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sentations, I can simplify my mold assembly to show only the detail I need.  Here, I will) 103.8 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(show the insert and the A and B plates of the mold base.  Using coordinate systems as) 103.8 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (assembly constraints, I am able to quickly assemble the drill housing design into the insert) 103.8 166 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the A and B plates.  Now I will clean up the display to focus on the next step.) 103.8 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(MOLDESIGN SCRIPT) 235.02 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22-3) 521.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 504 612 576 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(   MOLD) 0 -270 594.05 513.6 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0 X
0 0 0 1 0 0 0 K
(SHRINKAGE) 72 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(As part of the mold design process, I need to account for material shrinkage.   I will be) 103.8 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(applying shrinkage which will increase reference part dimensions to compensate for mate-) 103.8 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(rial contraction upon cooling in a mold.  How do you typically take care of shrinkage for) 103.8 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.19 (your parts?  W) 103.8 656 P
-0.19 (ith Pro/MOLDESIGN, it is easy to apply shrinkage in many dif) 173.73 656 P
-0.19 (ferent ways.) 475.93 656 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (I could set individual dimensions to shrink or expand by a certain amount.  I can also spec-) 103.8 642 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ify certain features, such as the holes here to have shrinkage.  I could specify a certain) 103.8 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction, say the X, Y) 103.8 614 T
(, or Z direction.  For this particular part, let's apply shrinkage by) 210.9 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(scale to the X, Y) 103.8 600 T
(, and Z directions.  Since I have created several molds similar to this one) 182.57 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with the same \336ll material in mind, I know to apply 3% shrinkage in-plane \050X and Z direc-) 103.8 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (tions\051 and 5% shrinkage out-of-plane \050Y direction\051.  I can always modify the shrinkage val-) 103.8 572 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.2 (ues at any time if I decide to change the \336ll material. W) 103.8 558 P
-0.2 (ith Pro/MOLDESIGN, shrinkage is) 367.82 558 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(easily incorporated into the model.) 103.8 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(MOLD-FILLING ANAL) 72 516 T
(YSIS) 199.9 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(In order to show the entire mold design process, I have sized and located the runner and) 103.8 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gate system for this part ahead of time.  Using the integrated solver within) 103.8 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pro/MOLDESIGN, C-FLOW/EZ from AC T) 103.8 474 T
(echnology) 319.94 474 T
(, I can quickly get a rough idea of) 369.15 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the quality of the runner system.  The solver in Pro/MOLDESIGN requires a mid-plane) 103.8 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.08 (mesh.  W) 103.8 446 P
-0.08 (ith Pro/MOLDESIGN, I can mesh directly on my solid model of the design part.) 148.83 446 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (Here I have de\336ned a midplane mesh with a runner system.  Using C-FLOW/EZ, I can ana-) 103.8 432 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lyze this meshed model and runner system to display the probable location of air traps,) 103.8 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(weld lines, melt front, and \336ll velocity) 103.8 404 T
(.  I'm fairly con\336dent that this a good approach, and) 287.02 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.4 (based on previous experience I am sure that our marketing group will appreciate gating this) 103.8 390 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (drill housing in non-visible areas.  At this point I will send the model to the analysis group) 103.8 376 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for a full analysis and continue with my work.) 103.8 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(P) 72 334 T
(AR) 78.44 334 T
(TING SURF) 95.35 334 T
(ACE CREA) 159.47 334 T
(TION) 220.91 334 T
3 F
(\050P) 254.58 334 T
(ARTINGSURF) 265.02 334 T
1 F
(SIMPLIFIED REPRESENT) 344.7 334 T
(A) 476.8 334 T
(TION\051) 483.68 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.42 (I am ready to start creating the parting surface so that I can divide my  workpiece insert into) 103.8 320 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (the core and cavity halves for my mold.  By  referencing the existing surfaces of the model,) 103.8 306 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (I can easily create the  parting surface that I need. More importantly) 103.8 292 P
-0.05 (, I know that because I) 428.66 292 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(am  referencing the model, any changes that are made to it will automatically be  re\337ected) 103.8 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(in my parting surface.  Let's start by generating the parting  surface over the reference) 103.8 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.35 (model.  Essentially) 103.8 250 P
-0.35 (, I am copying the surfaces that  already exist on the upper surface of the) 193.99 250 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.41 (model.  I can quickly copy all of  the surfaces from the barrel surface down to bottom edges) 103.8 236 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the part and then  \336ll the appropriate surfaces.  Pro/MOLDESIGN has many powerful) 103.8 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (tools for solid and surface geometry manipulation.  W) 103.8 208 P
-0.33 (ith Pro/MOLDESIGN, it is easy join) 360.31 208 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.41 (these surfaces  to the current parting surface .  Notice that upon joining these surfaces to the) 103.8 194 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(current parting surface, Pro/MOLDESIGN  changes the color of these surfaces from) 103.8 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.3 (yellow \050unmer) 103.8 166 P
-0.3 (ged\051 to magenta.  Now) 173.61 166 P
-0.3 (, all that is left is to extend this current parting surface) 281.28 166 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to cut the workpiece insert into two  halves.  By taking advantage of Pro/ENGINEER's) 103.8 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.43 (functionality) 103.8 138 P
-0.43 (, I can create  complex geometry very quickly) 164.35 138 P
-0.43 (.  I'll set up a sketching plane that) 380.4 138 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(passes  through the bottom edge of my parting surface and use the top edge loop of the) 103.8 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(workpiece insert to de\336ne the \337at surface.  I will extend the current  parting surface up to) 103.8 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this \337at surface and then mer) 103.8 96 T
(ge these surfaces  together to form the \336nal parting surface) 242.55 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(needed to split the workpiece insert into the two halves for my mold.) 103.8 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(MOLDESIGN SCRIPT) 235.02 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(22-4) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SCRIPT) 506.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(RUNNER) 72 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(I am now ready to add the runner to my mold assembly) 103.8 698 T
(.  I could create the  runner using) 368.65 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(regular Pro/ENGINEER features such as a revolved cut, but a  runner is something that I) 103.8 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use everyday in my molds.  Pro/MOLDESIGN gives me  the ability to store features or) 103.8 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(groups of features in a library of commonly  used items, so that I don't have to recreate it) 103.8 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.3 (every time; I can simply reuse  the runner that I have already setup.  Once I retrieve the run-) 103.8 642 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ner) 103.8 628 T
(, it will  highlight and prompt me to pick corresponding placement constraints in my) 118.64 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mold  for the new runner) 103.8 614 T
(.  W) 222.78 614 T
(ith just a few menu picks I am able to add my runner  to the) 242.63 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mold assembly) 103.8 600 T
(.  By making use of previous work, I am now able to work  faster and more) 175.36 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (ef) 103.8 586 P
-0.05 (\336ciently) 112.91 586 P
-0.05 (.  Notice that the sprue in the mold assembly is  not connected to our runner) 151.46 586 P
-0.05 (, this) 513.77 586 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(detail can be completed later) 103.8 572 T
(.  I would like to continue in order to show you the mold) 241.1 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(design process.) 103.8 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(SPLITTING THE WORKPIECE INSER) 72 530 T
(T AND EXTRACTING P) 283.96 530 T
(AR) 414.73 530 T
(TS) 431.64 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(I now have all of the necessary information to split our workpiece into the  two mold vol-) 103.8 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(umes, so I'll simply ask Pro/MOLDESIGN to divide the mold into two  halves using the) 103.8 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (\336nalized parting surface.  Are there any questions so  far?  Pro/MOLDESIGN identi\336es the) 103.8 488 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(upper and lower halves of the mold insert  and displays them as yellow and blue so that I) 103.8 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(can give them appropriate names  for later identi\336cation.   On the screen you can see the) 103.8 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(two volumes  representing the top and bottom halves of the mold.  If I wanted to add side) 103.8 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(action or sliders to this mold, I could split these volumes.  However) 103.8 432 T
(, to  de\336ne this mold, I) 427.97 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(only want the top and bottom plates.  I would like to  create actual Pro/ENGINEER parts) 103.8 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.11 (that represent these plates.  T) 103.8 404 P
-0.11 (o do this I  will extract the top and bottom plates.  T) 242.36 404 P
-0.11 (o help see) 489.36 404 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(what is happening a  little easier) 103.8 390 T
(, I will turn of) 257.96 390 T
(f the display of the workpiece.  As I extract) 324.74 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the  bottom half of the mold, you can see the core and the drill housing part. I'll  \336nish by) 103.8 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(extracting the top half, the mold cavity insert.  These core and  cavity plates represent the) 103.8 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shrinkage compensated parts necessary to produce my molded part.) 103.8 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(ASSEMBLE CORE INT) 72 320 T
(O ADDITIONAL INSER) 199.14 320 T
(T) 328.73 320 T
3 F
(\050ST) 339.73 320 T
(OR) 357.52 320 T
(YBOOK) 373.97 320 T
1 F
(SIMPLIFIED) 417.64 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          REPRESENT) 72 306 T
(A) 165.78 306 T
(TION\051) 172.67 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Now) 103.8 292 T
(, I'll use assembly functionality within Pro/MOLDESIGN to assemble the core  insert) 126.35 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(into the other insert area in the A and B plates to demonstrate how  easily a multi-cavity) 103.8 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mold assembly can be created.  Then, I will include these components in my dif) 103.8 264 T
(ferent) 486.86 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(representations of the mold model.) 103.8 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(EJECT) 72 222 T
(OR PIN CLEARANCE HOLE) 110.46 222 T
3 F
(\050EJ_PIN_CONFIG) 271.8 222 T
1 F
(SIMPLIFIED) 372.13 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(           REPRESENT) 72 208 T
(A) 168.78 208 T
(TION\051) 175.67 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(I will begin creating the ejection system needed to remove the molded part from the mold) 103.8 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(base assembly) 103.8 180 T
(. W) 172.01 180 T
(ith a  representation of the mold base assembly containing only those) 188.86 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(components \050ejector plate, support plate, B plate, and core insert\051 intersected by the ejec-) 103.8 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.37 (tion system, I can create an ejector pin clearance hole mold assembly feature on a point and) 103.8 152 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(enter the diameter value for each component that it intersects.  The diameter value for the) 103.8 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hole of intersection can be modi\336ed, and the number of components intersected by this) 103.8 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.41 (ejector pin clearance hole feature may be changed.  If a more complex ejector pin clearance) 103.8 110 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hole feature is desired, assembly features or feature groups may be utilized.) 103.8 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(MOLDESIGN SCRIPT) 235.02 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22-5) 521.67 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 504 612 576 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(   MOLD) 0 -270 594.05 513.6 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0 X
0 0 0 1 0 0 0 K
(BIG CHANGE) 72 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.05 (How many times does this happen to you?  I've just received a drawing from the  engineer-) 103.8 684 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing department detailing the changes that they have made to the model.   In order to acco-) 103.8 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.39 (modate the marketing department, a commercial version of  this drill housing was designed) 103.8 656 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (that not only changes the overall geometry  of the single product model, but additional fea-) 103.8 642 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tures had to be incorporated to  house a lar) 103.8 628 T
(ger drill motor for the commercial version.  In) 307.87 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.42 (order to provide ventilation and support for this lar) 103.8 614 P
-0.42 (ger motor) 344.2 614 P
-0.42 (, additional slots and ribs  were) 390.29 614 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(designed respectively) 103.8 600 T
(.  Let's go ahead and incorporate these changes into  our model.  See) 206.66 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (how quickly I was able to accomodate lar) 103.8 586 P
-0.23 (ge changes to the base  design.  Just as important,) 301.58 586 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(these changes will be re\337ected throughout my  entire mold assembly) 103.8 572 T
(.  Let's take a look at) 432.31 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the mold.  In a traditional  system, we would have to start over de\336ning our mold compo-) 103.8 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(nents, however) 103.8 544 T
(, due  to the associative nature of Pro/ENGINEER, changes such as these) 175.97 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(are easy to  implement at any phase of the design process.  As you can see, the mold has) 103.8 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(completely updated to re\337ect my new design.) 103.8 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(As you would expect, the  moldbase assem-) 325.1 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(bly will update to re\337ect the newest con\336guration.  The core  inserts have clearly been) 103.8 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(updated to re\337ect the commercial version of the  drill housing.) 103.8 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lastly) 409.43 488 T
(, let's take a look at) 438.65 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the drawing.  As you may expect,  the drawing has also been updated to accurately re\337ect) 103.8 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the new geometry) 103.8 460 T
(.) 189 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(SUMMAR) 72 432 T
(Y) 126.9 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Lets summarize what I have just shown you.  Y) 103.8 418 T
(ou have seen how Pro/MOLDESIGN) 331.23 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (allows mold designers to bring better products to market faster) 103.8 404 P
-0.25 (.  This demonstration details) 401.89 404 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(how deliverables can be linked to the single product  model, so that changes in the design) 103.8 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (part can be realized simultaneously in  all associated deliverables.  Multiple simpli\336ed rep-) 103.8 376 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(resentations are used  to display various stages in the mold design process.  In  the concep-) 103.8 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tual  design phase, a 16 X 26 D-M-E Standard A-series mold base is chosen and retrieved) 103.8 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(from a library for the drill housing part.  Pro/ENGINEER allows the mold maker to begin) 103.8 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sizing and documenting the mold base in the beginning of the design process.  Next,) 103.8 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.2 (shrinkage is applied to the reference model that has been assembled into the insert of the A) 103.8 306 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and B plates. Using the integrated solver) 103.8 292 T
(, I was able to get a rough approximation of the) 298.3 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(runner system sizing and placement. I created a parting surface that was associatively) 103.8 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(linked to the surfaces of the part itself.   I created our core and cavity mold inserts, and) 103.8 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(assembled the core insert  into my moldbase.  The initial steps of an ejection system are) 103.8 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(performed.   Not only did I change my mold, but I was able to change the original part as) 103.8 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(well.    Finally) 103.8 152 T
(, I was able to adapt fundamental design changes to the original model and) 172.69 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(we saw how all of the associated parts, assemblies, and deliverables updated to re\337ect) 103.8 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(those changes.) 103.8 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Simply stated, Pro/MOLDESIGN allows you to design better molds faster than you ever) 103.8 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(have before.  Thank you for you attention.  Can I answer any questions?) 103.8 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(MOLDESIGN SCRIPT) 235.02 746.67 T
0 0 0 1 0 0 0 K
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(22-6) 72 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PTC Confidential) 270.58 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SCRIPT) 506.62 24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-Roman
%%+ Times-BoldItalic
%%EOF
