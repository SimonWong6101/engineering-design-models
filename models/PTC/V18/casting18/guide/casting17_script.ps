%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 5 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING SCRIPT) 246.69 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
(PTC Confidential) 270.58 24 T
(4-1) 526.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 576 612 648 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(CASTING) 0 -270 594.05 585.6 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0 X
0 0 0 1 0 0 0 K
(SUMMAR) 274.22 712 T
(Y) 329.12 712 T
2 F
(W) 150 684 T
(elcome to the demonstration of Pro/CASTING -- a module within the Pro/) 160.37 684 T
(ENGINEER family of CAD/CAM tools that will allow you to rapidly create your casting) 108 670 T
(tools and dies. The Pro/CASTING module will allow you to take full advantage of the) 108 656 T
(parametric, associative, solid modelling capabilities of Pro/ENGINEER. This product) 108 642 T
(enables the casting specialists and engineers to work concurrently with their design, anal-) 108 628 T
(ysis, manufacturing, and QC counterparts. Pro/CASTING is designed to allow rapid pro-) 108 614 T
(gression from art to part regardless of wether your process is sand casting, permanent) 108 600 T
(mold casting, or die casting. T) 108 586 T
(oday everybody is talking about rapid prototyping, \336rst-to-) 252.82 586 T
(market, market driven -- Pro/CASTING allows me to do all those things.) 108 572 T
0 F
(This pr) 461.3 572 T
(oduct) 498.77 572 T
(will let you to work mor) 108 558 T
(e ef\336ciently) 230.77 558 T
(, mor) 288.43 558 T
(e pr) 315.54 558 T
(oductively and most importantly it will) 335.65 558 T
-0.34 (allow you to pr) 108 544 P
-0.34 (oduce better parts faster and cheaper) 183.77 544 P
2 F
-0.34 (. Pro/CASTING is one of the tools) 373.04 544 P
(that will allow you to optimize your total process from art to part.) 108 530 T
(In this demonstration I will show you a \322typical\323 casting scenario designed for) 150 516 T
-0.4 (the production of a Formula One race car) 108 502 P
-0.4 (\325) 303.95 502 P
-0.4 (s aluminum [) 307.28 502 P
1 F
-0.4 (per) 369.83 502 P
-0.4 (haps magnesium alloy) 385.61 502 P
2 F
-0.4 (] gearbox) 492.14 502 P
(using a permanent mold casting. This gearbox was designed for the 1995 racing year) 108 488 T
(. In) 514.6 488 T
(this presentation I will be demonstrating some of the unique tools of Pro/CASTING. By) 108 474 T
(no means are the capabilities you\325ll see all inclusive,) 108 460 T
0 F
(ther) 363.96 460 T
(e ar) 385.07 460 T
(e numer) 404.51 460 T
(ous advanced) 446.62 460 T
(functionalities of Pr) 108 446 T
(o/CASTING that I\325d love to show after this structur) 209.11 446 T
(ed demon-) 474.88 446 T
(stration) 108 432 T
2 F
(.) 148 432 T
(I will evaluate a previously existing assembly) 150 418 T
(, create cast results, and perform a) 368.53 418 T
(simulated die opening. In order to produce the highest quality casting I will rely on the) 108 404 T
-0.5 (thickness check and draft check tools, available within Pro/CASTING, to identify possible) 108 390 P
(problem areas. T) 108 376 T
(o create the inside voids I will use a sand core [making sure to allow for) 188.14 376 T
(the core print] -- an entity which is familiar to the casting engineer but is unique to Pro/) 108 362 T
(CASTING. Finally using Pro/PDM -- Parametric T) 108 348 T
(echnology Corporation\325) 353.48 348 T
(s Parametric) 467.81 348 T
(Design Manager I will ensure that the Engineering Change Request \050ECR\051 is properly) 108 334 T
(incorporated into all of my deliverable -- production drawing, die component geometry) 108 320 T
([cope and drag], sand core geometry) 108 306 T
(, and of course cast result. Throughout this demon-) 282.49 306 T
(stration if you have any questions I encourage you to please ask. And so without any fur-) 108 292 T
(ther interruptions, direct from W) 108 278 T
(altham, I am pleased to present Pro/CASTING...) 264.01 278 T
0 14 Q
(CASTING SCRIPT) 246.69 234.67 T
2 12 Q
-0.36 (What you are seeing on the screen is the cast assembly of the gearbox as I have retrieved it) 108 185 P
(from memory) 108 171 T
(. In today\325) 173.54 171 T
(s demo I will try to show a representative, typical Pro/CASTING) 222.54 171 T
(implementation. A coworker has worked on this casting, and has left me a message that) 108 157 T
(some of the work is yet to be done.) 108 143 T
-0.27 (As you can see some of the preliminary work has already been done. The die block [or the) 108 115 P
(cast workpiece] has already been created and assembled, and the parting surface has also) 108 101 T
-0.15 (been de\336ned. T) 108 87 P
-0.15 (o create the parting surface I would simply have had to use the edges of an) 181.17 87 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING SCRIPT) 246.69 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(4-2) 72 24 T
(PTC Confidential) 270.58 24 T
(SCRIPT) 506.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(already existing workpiece and the surface would always be of the correct size. The part-) 108 712 T
(ing surface of Pro/CASTING is equivalent to the parting curves I would draw on a cast) 108 698 T
(drawing.) 108 684 T
0 F
(SPRUE RUNNER GA) 72 636 T
(TE SYSTEM) 185.77 636 T
2 F
(Y) 108 622 T
(ou can see that in the cast assembly on the screen that sprue-runner) 115.46 622 T
(-gate system is miss-) 437.15 622 T
(ing. There are two basic solutions that are possible for this: I can create cuts in my die) 108 608 T
-0.07 (block or I can reuse previously created User De\336ned Features \050UDF\051. I will opt to use the) 108 594 P
(second solution --) 108 580 T
0 F
(using a UDF will allow me to r) 196.99 580 T
(euse my engineering design) 352.44 580 T
2 F
(. In my) 492.11 580 T
(case I have a library of sprue-runner) 108 566 T
(-gate features. By relying on a prede\336ned sprue-run-) 281.69 566 T
-0.35 (ner) 108 552 P
-0.35 (-gate system I do not have to re-invent the wheel every time I need to complete my cast) 123.08 552 P
(design. In the small window you can see the particular metal feed system I am going to) 108 538 T
(use. Pro/ENGINEER allows me to place the cuts you see in cross-section into my cast) 108 524 T
-0.24 (assembly by prompting me for the appropriate references -- this is a good way to standard-) 108 510 P
(ize your sprue-runner) 108 496 T
(-gate geometry on a company wide scale. As I place my runner sys-) 211.06 496 T
-0.31 (tem in place, you\325ll be able to see the metal \337ow passages that have been cut out of my die) 108 482 P
(block.) 108 468 T
0 F
(DIE BLOCK SPLIT) 72 420 T
2 F
-0.22 (In order to extract the cast result from the die block I need to split it into a top and bottom,) 108 406 P
-0.06 (or in the case of sand casting, into a cope and a drag. I will ask Pro/CASTING to split my) 108 392 P
(die block assembly) 108 378 T
(. Pro/ENGINEER calculates the cavity geometries in the two die com-) 199.21 378 T
-0.38 (ponents based on the design parts I want to cast and also based on the metal feeder system.) 108 364 P
(The casting impression geometry is automatically calculated by Pro/ENGINEER -- as a) 108 350 T
-0.45 (user I do not need to create any sort of complex, and possibly inaccurate, reverse geometry) 108 336 P
(-- Pro/CASTING will calculate the impression geometry automatically) 108 322 T
(. Y) 447.52 322 T
(ou can see that) 460.98 322 T
(as the two die components are created I have an opportunity to name them and perhaps) 108 308 T
-0.28 (perform additional splits -- if perhaps I want to generate a three component die cast assem-) 108 294 P
(bly) 108 280 T
(.) 122.56 280 T
0 F
(CAST RESUL) 72 232 T
(T CREA) 145.91 232 T
(TION) 190.02 232 T
2 F
-0.29 (I now have the two die components which I can machine using Pro/MANUF) 108 218 P
-0.29 (ACTURING,) 472.29 218 P
(but I am much more interested in producing a cast result --) 108 204 T
0 F
(Pr) 392.62 204 T
(o/CASTING will cr) 405.06 204 T
(eate) 504.18 204 T
(cast r) 108 190 T
(esults automatically) 136.1 190 T
2 F
(. I\325ll show you the cast results in a separate window) 236.99 190 T
(. As the) 484.5 190 T
-0.12 (image comes up you can clearly see that the cast result incorporates the sprue-runner) 108 176 P
-0.12 (-gate) 513.13 176 P
(systems well as my initial cast design models. This functionality is particularly important) 108 162 T
(if I want to know the appropriate, subsequent manufacturing processes, or if perhaps I) 108 148 T
(want to know the amount [volume] of molten metal I need to create my casting I can use) 108 134 T
(mass properties to do these simple calculations automatically) 108 120 T
(.) 400.86 120 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING SCRIPT) 246.69 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
(PTC Confidential) 270.58 24 T
(4-3) 526.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 576 612 648 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(CASTING) 0 -270 594.05 585.6 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0 X
0 0 0 1 0 0 0 K
(DIE OPENING) 72 712 T
2 F
(It is certainly useful for me to perform a die opening simulation. Doing the simulation I) 108 698 T
(can visually ensure that there is no interference but in addition I have the ability to per-) 108 684 T
(form interference checking using the Pro/ENGINEER\325) 108 670 T
(s unique interference checking) 370.94 670 T
(capability -- I\325ll use that functionality a little bit later) 108 656 T
(. In this series of steps I\325ll simply) 360.98 656 T
-0.09 (move my two die components apart and slide the sand core to the front. There really is no) 108 642 P
(problem with the sand core moving through a portion of the solid cast result since most) 108 628 T
(likely I\325ll simply shake the sand core out. However) 108 614 T
(, just by looking at the die assembly I) 353.15 614 T
(can see a serious problem -- I did not bother to check if the part geometry requires two) 108 600 T
-0.17 (sand cores or if I can get away with just one. Since I see some potential problems with the) 108 586 P
-0.11 (cast assembly I\325ll look closer at the front portion of this gearbox -- the one missing a sand) 108 572 P
(core.) 108 558 T
0 F
(CAST MODEL DISPLA) 72 510 T
(Y) 198.24 510 T
2 F
(I\325ll change my the parts I can see to get a better view of the front design part.) 108 496 T
0 F
(FEA) 72 448 T
(TURE SUPPRESSION) 95.11 448 T
2 F
(As you can see there are some features on this part that would be too expensive to cast) 108 434 T
-0.02 (right into the model. Perhaps I might, under certain circumstances, leave these features in) 108 420 P
(-- however) 108 406 T
(, I want to produce a low cost, high quality casting. Besides these features will) 159.83 406 T
(be machined later on anyway) 108 392 T
(.) 247.85 392 T
1 F
(I encourage you to take a look at the pr) 253.85 392 T
(oduction milling) 443.04 392 T
-0.18 (demonstration of Pr) 108 378 P
-0.18 (o/MANUF) 203.87 378 P
-0.18 (ACTURING wher) 252.98 378 P
-0.18 (e the casting r) 338.03 378 P
-0.18 (esults of this demonstration) 405.37 378 P
(ar) 108 364 T
(e machined) 118.22 364 T
2 F
(. I like to think of this feature suppression as simply another way of looking) 173.21 364 T
-0.1 (at a part -- the part designer needs all these features, I need a few features less for the cast-) 108 350 P
(ing, and the mock-up engineer will need even fewer features -- just the outer envelope to) 108 336 T
(check for proper part assembly) 108 322 T
(.) 255.84 322 T
0 F
(SHRINKAGE) 72 274 T
2 F
(Apparently there is no shrinkage on the front portion of the gearbox. I\325ll apply isotropic) 108 260 T
(shrinkage of 2% in every direction. Pro/CASTING allows me to apply isotropic or aniso-) 108 246 T
(tropic shrinkage. Using the powerful capability of shrinkage to compensate for natural) 108 232 T
(material properties I will make my cavity appropriately sized to accept more metal in) 108 218 T
(order to produce a properly sized \336nal casting.) 108 204 T
0 F
(THICKNESS CHECK) 72 156 T
2 F
(As my casting cools and solidi\336es I need to ensure that I did not inadvertently allow cast-) 108 142 T
(ing defects to occur because of insuf) 108 128 T
(\336cient or excessive part thickness. I want to prevent) 283.07 128 T
-0.41 (porosity) 108 114 P
-0.41 (, and hot spots from occurring in the thick sections, and similarly I want to prevent) 146.56 114 P
(tears in the overly thin areas. The thickness check is color coded -- red areas exceed my) 108 100 T
(maximum condition, blue areas fall below my minimum thickness requirement. T) 108 86 T
(o evalu-) 499.8 86 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING SCRIPT) 246.69 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(4-4) 72 24 T
(PTC Confidential) 270.58 24 T
(SCRIPT) 506.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(ate my part I will rely on the thickness check capability of Pro/CASTING. I will evaluate) 108 712 T
(my part by \322slicing\323 it every 10th millimeter and looking for regions that exceed 35 milli-) 108 698 T
(meters and/or fall below 2 millimeters. I know from my past experience with these types) 108 684 T
(of parts that if I stay in that safe region I will have very few casting related defects. I use) 108 670 T
-0.28 (the INFO menu option to rapidly display information on all the slices in the part. I see that) 108 656 P
(there are a few slices which violate the maximum thickness condition -- if I step through) 108 642 T
-0.02 (my slices individually I can see the regions in red which exceed the maximum user allow-) 108 628 P
-0.31 (able wall thickness. At this point I see that there is a problem -- I\325ll correct it now and then) 108 614 P
(discuss this potential change with the part designer) 108 600 T
(. Perhaps the change is not very impor-) 351.65 600 T
(tant, or maybe the width has to be that and I will have to make special casting arrange-) 108 586 T
(ments to overcome this dif) 108 572 T
(\336culty) 235.78 572 T
(. Pro/CASTING will now update all my casting model\325) 265.67 572 T
(s) 530.66 572 T
(top boss width. As you can see the problem is resolved.) 108 558 T
0 F
(DRAFT CHECK) 72 510 T
2 F
-0.23 (Another useful tool in Pro/CASTING that I will use is draft check. Here I will analyze my) 108 496 P
(part relative to a pull direction for suf) 108 482 T
(\336cient draft. In truth all I want to know is whether I) 288.08 482 T
(can remove my part from the die without causing any major damage to either it, or my) 108 468 T
(tooling. I can perform draft check for either a one directional pull -- where I pull the part) 108 454 T
-0.24 (out of a die component, or a two directional pull -- my part remains stationary and the two) 108 440 P
-0.47 (die components separate in opposite direction. I will use the latter) 108 426 P
-0.47 (, since I want to optimize) 418.48 426 P
(my die opening sequence.) 108 412 T
-0.25 (The way to interpret the \322rainbow\323 of colors you see on the screen is to recognize that any) 108 398 P
-0.16 (surface which has suf) 108 384 P
-0.16 (\336cient draft will be displayed in either blue or magenta, all other col-) 210.94 384 P
-0.16 (ors represent regions that may require additional draft. There are obviously regions on the) 108 370 P
(front component of the gearbox that require draft before I can be sure that I\325ll be able to) 108 356 T
(cleanly remove them form the die. The problem areas that Pro/CASTING is highlighting) 108 342 T
-0.45 (are regions of the part that traditionally the part designer would leave for the pattern maker) 108 328 P
(to correct.) 108 314 T
0 F
(RIB DRAFT) 72 283 T
2 F
(I saw during draft check that the ribs the part designer used on the gearbox have not all) 108 269 T
(been drafted. After I draft one of the ribs, I can take advantage of Pro/ENGINEER\325) 108 255 T
(s pat-) 507.22 255 T
-0.07 (terning capability and simply pattern that draft to appear on the other ribs. As you can see) 108 241 P
-0.21 (in the menu I can create four dif) 108 227 P
-0.21 (ferent types of draft: Regular) 260.6 227 P
-0.21 (, Split, Curve Drive, and T) 398.57 227 P
-0.21 (an-) 524.68 227 P
(gent.) 108 213 T
1 F
(As a brief overview I would like to describe to you the differ) 108 182 T
(ent types of draft. Regular) 395.53 182 T
(draft allows me to draft side walls of a box r) 108 168 T
(elative to its top -- cr) 320.92 168 T
(eating a truncated pyra-) 421.46 168 T
(mid. Split draft will let me, using a curve or a sketch, to deform a surface that it is on.) 108 154 T
-0.39 (Curve driven draft is a very powerful featur) 108 140 P
-0.39 (e that will ensur) 315.15 140 P
-0.39 (e that r) 391.22 140 P
-0.39 (egar) 424.66 140 P
-0.39 (dless of the parting) 446.22 140 P
-0.14 (surface complexity) 108 126 P
-0.14 (, and without any dif\336culty my surface will meet at a single edge on the) 197.51 126 P
-0.39 (parting surface. Finally) 108 112 P
-0.39 (, tangent draft is designed to allow me to cr) 220.9 112 P
-0.39 (eate draft on a cylinder) 426.29 112 P
(-- if I imagine casting a cylinder on its side in or) 108 98 T
(der to insur) 340.55 98 T
(e pr) 396.11 98 T
(oper die component sepa-) 414.66 98 T
(ration I may want to have draft on its sides for this I will use tangent draft.) 108 84 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING SCRIPT) 246.69 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
(PTC Confidential) 270.58 24 T
(4-5) 526.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 576 612 648 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(CASTING) 0 -270 594.05 585.6 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0 X
0 0 0 1 0 0 0 K
(T) 72 678 T
(OP BOSS DRAFT) 79.79 678 T
2 F
(One of other regions that I want to draft is the top boss with the through-all hole. T) 108 664 T
(o draft) 505.12 664 T
-0.01 (the inside of the hole as well as the outside of the boss I\325ll rely on an advanced draft capa-) 108 650 P
(bility of Pro/CASTING. In the previous section I drafted the ribs using the regular draft) 108 636 T
(feature. T) 108 622 T
(o complete my job here I will rely on the Split Draft option. I will sketch a split) 153.8 622 T
(line and Pro/CASTING will draft the boss relative to that. Also since I don\325) 108 608 T
(t want any) 471.08 608 T
(sharp edges on my boss -- a region of high stress, I\325ll round all edges. Let me now show) 108 594 T
(you what the cross-section of the boss looks like now) 108 580 T
(. Notice that) 363.53 580 T
0 F
(Pr) 425.52 580 T
(o/ENGINEER is) 437.96 580 T
(intelligent enough to draft inside and outside surfaces of a split draft operation in) 108 566 T
(opposite dir) 108 552 T
(ections) 168.79 552 T
2 F
(.) 204.12 552 T
0 F
(FRONT FLANGE OFFSET AND DRAFT) 72 504 T
2 F
(I want to draft the front \337ange, but I also know that the \337ange needs to be \337at and of) 108 490 T
(higher quality than what I can economically produce by casting it near) 108 476 T
(-net-shape. Since) 446.03 476 T
(the front \337ange is the one point of contact between the gearbox and the transmission I\325ll) 108 462 T
-0.09 (de\336nitely machine later) 108 448 P
-0.09 (. Consequently) 220.49 448 P
-0.09 (, I want to provide a machine of) 291.62 448 P
-0.09 (fset so that in a sub-) 444.1 448 P
(sequent manufacturing operation I\325ll be able to machine the draft allowance of) 108 434 T
(f the part.) 484.69 434 T
-0.22 (Once I have the of) 108 420 P
-0.22 (fset in place I can draft the \337ange very similarly to the way I drafted the) 195.55 420 P
(top boss.) 108 406 T
0 F
(SAND CORE CREA) 72 358 T
(TION) 178.44 358 T
2 F
(As you recall this cast assembly requires another sand core in order for me to be able to) 108 344 T
-0.06 (remove the casting result from the die cavity) 108 330 P
-0.06 (. T) 321.12 330 P
-0.06 (o accomplish this I will create a front sand) 333.55 330 P
-0.05 (core. I will create the sand core for this casting assembly by referencing inside surfaces --) 108 316 P
-0.08 (this way if the part changes my sand core will update as well and any associated manufac-) 108 302 P
-0.13 (turing operations either for the core box or for the patterns will evolve accordingly) 108 288 P
-0.13 (. I have) 501.75 288 P
-0.29 (created my sand core in such a way that I provide appropriate core print -- the extra region) 108 274 P
-0.44 (of material on my sand core is designed for the proper location of the sand cores within the) 108 260 P
-0.24 (casting assembly) 108 246 P
-0.24 (. If I reposition the part to the top view you\325ll be able to see the core print) 188.64 246 P
-0.35 (extension. In the small window you can see the sand core and that fact that it looks exactly) 108 232 P
(like the inside of my part.) 108 218 T
0 F
(MODEL UPDA) 72 170 T
(TE) 152.77 170 T
2 F
-0.05 (I want Pro/CASTING to update all my parts -- to update the top [cope] and bottom [drag]) 108 156 P
(of my die block to reference the newly created sand core. As my deliverables update let) 108 142 T
(me show you what it all looks like now) 108 128 T
(.) 295.88 128 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING SCRIPT) 246.69 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(4-6) 72 24 T
(PTC Confidential) 270.58 24 T
(SCRIPT) 506.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(INTERFERENCE CHECKING) 72 712 T
2 F
(Earlier I had fairly simple parts and I could clearly see regions of possible interference. I) 108 698 T
-0.16 (want to see what happens if I try to move my sand core throughout my cast result. W) 108 684 P
-0.16 (e can) 512.33 684 P
(see that the region of interference is shown in yellow -- this region indicates all the sec-) 108 670 T
(tions of my cast result that the sand core will have to \322break through\323 in order to move in) 108 656 T
(the speci\336ed direction. There is a problem so I can either rede\336ne my move direction for) 108 642 T
(my parts, or) 108 628 T
(, since I know that I\325ll simply shake the sand core out in my real operation, I) 165.18 628 T
(will let this move stay as is.) 108 614 T
0 F
(VIEW PREP) 72 566 T
(ARA) 138.78 566 T
(TION) 163.88 566 T
2 F
(I want to see that my cast result looks exactly like my design model.) 108 552 T
0 F
(DRA) 72 504 T
(WING UPDA) 96.66 504 T
(TE) 166.76 504 T
2 F
(I have an old gearbox assembly drawing from the design group. Apparently the design) 108 490 T
(manager has reviewed the gearbox assembly and has made some sort of modi\336cations in) 108 476 T
(order to make our Formula One race car more competitive and streamlined. I can see his) 108 462 T
(comments in the small markup window) 108 448 T
(. Let me change the drawing to correspond to the) 296.88 448 T
(manager) 108 434 T
(\325) 149.76 434 T
(s comments.) 153.1 434 T
0 F
(FINAL UPDA) 72 386 T
(TE) 144.77 386 T
2 F
-0.07 (As I bring my cast assembly I can see that the design model has changed to correspond to) 108 372 P
(the drawing change: the gearbox is shorter and narrower) 108 358 T
(, the mating region is smaller as) 378.11 358 T
(well [since I had to change the lip drop], and the rear spoiler mounting point has been) 108 344 T
-0.15 (moved forward to correspond to a shorter Formula One race car) 108 330 P
-0.15 (. I would like to show you) 412.4 330 P
(the front sand core updates based on the Engineering Change Report \050ECR\051\325) 108 316 T
(s modi\336ca-) 474.94 316 T
(tions. As Pro/CASTING updates all of my parts we can see that change happen on the) 108 302 T
(screen.) 108 288 T
0 F
(CONCLUSION) 72 240 T
2 F
(As we look at the \336nal part update let me summarize some of the key points:) 108 226 T
(Because of the unique, fully associative, parametric nature of Pro/ENGINEER and Pro/) 108 212 T
(CASTING the casting specialist has an opportunity to produce higher quality parts faster) 108 198 T
(and more economically) 108 184 T
(.) 219.86 184 T
-0.19 (All changes made to the design parts and assemblies automatically propagated to all other) 108 170 P
(associated environments.) 108 156 T
(The deliverables of Pro/CASTING -- the sand cores, the die components, the drawings,) 108 142 T
(potentially any manufacturing operations updated in a predictably fashion based on) 108 128 T
(changes that I made.) 108 114 T
1 F
-0.14 (Pr) 108 100 P
-0.14 (o/PDM allowed me to easily communicate my changes to other engineers working with) 119.56 100 P
(my parts. Mor) 108 86 T
(e importantly) 175.88 86 T
(, every member of the design to manufacturing team could be) 239.56 86 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING SCRIPT) 246.69 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(SCRIPT) 72 24 T
(PTC Confidential) 270.58 24 T
(4-7) 526.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 576 612 648 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
(CASTING) 0 -270 594.05 585.6 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0 X
0 0 0 1 0 0 0 K
(kept informed and updated by the latest changes.) 108 712 T
2 F
-0.33 (Ultimately it all comes down to simply this: all the terms, words, and phrases will not help) 108 698 P
(you do your job any better) 108 684 T
(, faster) 234.5 684 T
(, less expensively) 266.68 684 T
(, or to produce any higher quality prod-) 350.22 684 T
-0.08 (ucts. Pro/ENGINEER is the only fully associative, parametric, feature based modeler that) 108 670 P
(provides a complete solution to the cast designer) 108 656 T
(, allowing the tool and die specialist to) 341.16 656 T
(work concurrently with design, manufacturing, and drafting. Pro/CASTING allows the) 108 642 T
-0.24 (engineer to iterate the cast design concurrently with other developments for a quality) 108 628 P
-0.24 (, opti-) 511.57 628 P
(mal solution.) 108 614 T
-0.11 (Thank you for your attention, I will be more than happy now to answer any questions you) 108 600 P
(may have for me.) 108 586 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING SCRIPT) 246.69 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(4-8) 72 24 T
(PTC Confidential) 270.58 24 T
(SCRIPT) 506.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 8
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-Roman
%%EOF
