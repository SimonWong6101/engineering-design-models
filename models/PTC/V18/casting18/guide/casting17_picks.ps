%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 8 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "9" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING PICKS) 250.97 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 -208 1000 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(PICKS) 72 24 T
(PTC Confidential) 270.58 24 T
(4-9) 526.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 576 612 648 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
( CASTING) 0 -270 594.05 584.4 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING PICKS) 250.97 710.67 T
0 12 Q
(SET UP / INTRODUCTION) 72 681 T
2 F
(Run Pro/ENGINEER trail \336le [) 103.8 653 T
3 F
(setup15.txt) 254.46 653 T
2 F
(]) 333.66 653 T
0 F
(SPRUE RUNNER GA) 72 625 T
(TE PLACEMENT) 185.77 625 T
2 F
(ENVIRNMENT / DISP DTMPLN / DONE|RETURN / CAST / SEARCH-RETR /) 103.8 597 T
(CASTING.MFG / VIEW / LA) 103.8 576 T
(YER DISP / XSEC_DA) 249.68 576 T
(TUMS / DONE SEL /) 364.69 576 T
(DONE|RETURN /) 103.8 553.67 T
2 14 Q
({spu}) 196.86 553.67 T
2 9 Q
(MODE, P) 233.24 553.67 T
(AR) 268.42 553.67 T
(T) 280.38 553.67 T
(, RETRIEVE, source_of_udf, VIEW) 285.21 553.67 T
(, COSMETIC, SHADE,) 416.85 553.67 T
(DISPLA) 103.8 532 T
(Y) 134.47 532 T
(, DONE|RETURN) 139.81 532 T
2 12 Q
(/ X-SECTION / SECTION / QUIT WINDOW / CHANGE WIN-) 209.6 532 T
(DOW) 103.8 511 T
2 10 Q
(\050Change back to main window\051) 135.46 511 T
2 12 Q
(/ CAST FEA) 263.8 511 T
(TURE / DIE BLOCK / USER DEFINED /) 325.14 511 T
(SERACH-RETR / FEED_SYSTEM / DONE / DONE / <CR> / BLANK / VIEW /) 103.8 490 T
-0.14 (NAMES / SRG_PLACEMENT / DONE|RETURN /) 103.8 469 P
2 10 Q
-0.11 (\050Pick T) 358.05 469 P
-0.11 (op Right V) 386.96 469 P
-0.11 (ertex\051) 430.07 469 P
2 12 Q
-0.14 ( /) 453.39 469 P
2 10 Q
-0.11 (\050Pick T) 462.45 469 P
-0.11 (op Left V) 491.36 469 P
-0.11 (er-) 528.9 469 P
(tex\051  /  \050Pick Bottom Right V) 103.8 448 T
(ertex\051) 219.09 448 T
2 12 Q
( /) 242.41 448 T
2 10 Q
(\050Pick Bottom Left\051) 251.74 448 T
2 12 Q
( /   DONE  /) 327.86 448 T
2 10 Q
(\050Select the work block surface that) 394.85 448 T
-0.16 (faces towards you\051) 103.8 425.67 P
2 12 Q
-0.19 ( / DONE /) 179.01 425.67 P
2 14 Q
-0.22 ({vs}) 230.24 425.67 P
2 9 Q
-0.14 (VIEW) 258.93 425.67 P
-0.14 (,ORIENT) 281.6 425.67 P
-0.14 (A) 316.12 425.67 P
-0.14 (TION, SPIN) 321.62 425.67 P
2 12 Q
-0.19 (/) 369.31 425.67 P
2 14 Q
-0.22 ({vd}) 375.45 425.67 P
2 9 Q
-0.14 (VIEW) 406.17 425.67 P
-0.14 (, ORIENT) 428.83 425.67 P
-0.14 (A) 465.46 425.67 P
-0.14 (TION, DEF) 470.96 425.67 P
-0.14 (AUL) 513.14 425.67 P
-0.14 (T) 530.81 425.67 P
-0.14 (,) 535.64 425.67 P
(DONE|RETURN) 103.8 404 T
2 12 Q
(/ DONE|RETURN) 169.09 404 T
0 F
(INITIAL DIE BLOCK SPLIT) 72 369 T
2 F
(DIE COMP / SPLIT DIE / DONE /) 103.8 341 T
2 10 Q
(\050Select the only visible surface\051/) 277.13 341 T
2 12 Q
(DONE SEL / [) 409.05 341 T
3 F
(cope) 480.04 341 T
2 F
(] /) 508.84 341 T
([) 103.8 320 T
3 F
(drag) 107.8 320 T
2 F
(] / MAKE SOLID / COPE / MAKE SOLID / DRAG / DONE|RETURN) 136.6 320 T
0 F
(CAST RESUL) 72 285 T
(T CREA) 145.91 285 T
(TION) 190.02 285 T
2 F
(CAST MODEL / CREA) 103.8 257 T
(TE / CAST RESUL) 220.14 257 T
(T / [) 314.71 257 T
3 F
(result) 335.38 257 T
2 F
(] / BLANK / DIE BLOCK) 378.58 257 T
(BLANK / REF MODEL /) 103.8 236 T
2 10 Q
(\050Pick on the areas where reference models should be\051) 231.47 236 T
2 12 Q
(DONE SEL / DONE|RETURN /) 103.8 213.67 T
2 14 Q
({spr}) 263.86 213.67 T
2 9 Q
(MODE, P) 296.9 213.67 T
(AR) 332.08 213.67 T
(T) 344.04 213.67 T
(, RETRIEVE, result, VIEW) 348.87 213.67 T
(, COSMETIC, SHADE,) 448.53 213.67 T
(DISPLA) 103.8 192 T
(Y) 134.47 192 T
(, DONE|RETURN, VIEW) 139.81 192 T
(, ORIENT) 234.26 192 T
(A) 271.04 192 T
(TION, SPIN) 276.54 192 T
2 12 Q
( / COSMETIC / APPEARANCES  /   SET /) 322.03 192 T
2 10 Q
(\050Pick the pinkish color\051) 103.8 171 T
2 12 Q
( / P) 197.96 171 T
(AR) 212.86 171 T
(T  / QUIT WINDOW / CHANGE WINDOW  /) 228.81 171 T
2 10 Q
(\050T) 461.59 171 T
(o the main win-) 470.33 171 T
(dow\051) 103.8 151.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 1
%%Page: "10" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING PICKS) 250.97 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(4-10) 72 24 T
(PTC Confidential) 270.58 24 T
(PICKS) 511.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(DIE OPENING) 72 712 T
2 F
(DIE OPENEING / DEFINE STEP / DEFINE MOVE /) 103.8 684 T
2 10 Q
(\050Select the COPE\051) 369.44 684 T
2 12 Q
(DONE SEL /) 103.8 663 T
2 10 Q
(\050Pick on any edge that is parallel to the sprue\051) 170.8 663 T
2 12 Q
( / [) 354.38 663 T
3 F
(500) 367.71 663 T
2 F
(] / DEFINE MOVE /) 389.31 663 T
2 10 Q
(\050Select the) 492.96 663 T
-0.02 (DRAG\051) 103.8 642 P
2 12 Q
-0.02 (/ DONE SEL /) 137.69 642 P
2 10 Q
-0.02 (\050Pick on any edge that is parallel to the sprue\051) 210.94 642 P
2 12 Q
-0.02 ( / [) 394.36 642 P
3 F
-0.05 (-500) 407.65 642 P
2 F
-0.02 (] / DEFINE MOVE /) 436.45 642 P
-0.28 (SEL BY MENU / CORE_REAR.PR) 103.8 621 P
-0.28 (T  / DONE SEL /) 278.3 621 P
2 10 Q
-0.24 (\050Pick any edge perpendicular to the sprue\051) 363.25 621 P
2 12 Q
-0.28 ( /) 531.23 621 P
([750] / DONE  /) 103.8 598.67 T
2 14 Q
({ss}) 184.79 598.67 T
2 9 Q
(VIEW) 209.12 598.67 T
(, COSMETIC, SHADE, DISPLA) 231.78 598.67 T
(Y) 351.45 598.67 T
(, DONE|RETURN) 356.79 598.67 T
2 12 Q
( /) 424.08 598.67 T
2 14 Q
({vs}) 433.42 598.67 T
2 9 Q
(VIEW) 459.31 598.67 T
(, ORIENT) 481.97 598.67 T
(A-) 518.74 598.67 T
(TION, SPIN) 103.8 575.67 T
2 12 Q
( /) 149.29 575.67 T
2 14 Q
({vd}) 158.63 575.67 T
2 9 Q
(VIEW) 189.07 575.67 T
(, ORIENT) 211.73 575.67 T
(A) 248.51 575.67 T
(TION, DEF) 254.01 575.67 T
(AUL) 296.33 575.67 T
(T) 314 575.67 T
(, DONE|RETURN) 318.83 575.67 T
2 12 Q
( / DONE|RETURN /) 386.12 575.67 T
2 14 Q
({spd}) 103.8 552.67 T
2 9 Q
(MODE, P) 136.69 552.67 T
(AR) 171.86 552.67 T
(T) 183.82 552.67 T
(, RETRIEVE, drag, VIEW) 188.65 552.67 T
(, COSMETIC, SHADE, DISPLA) 284.3 552.67 T
(Y) 403.98 552.67 T
(, DONE|RETURN, VIEW) 409.31 552.67 T
(, ORIEN-) 503.77 552.67 T
(T) 103.8 529.67 T
(A) 108.58 529.67 T
(TION, SPIN) 114.08 529.67 T
2 12 Q
(/ DONE|RETURN /) 162.07 529.67 T
2 14 Q
({vr}) 261.47 529.67 T
2 9 Q
(VIEW) 290.07 529.67 T
(, REP) 312.73 529.67 T
(AINT) 332.91 529.67 T
(, DONE|RETURN) 353.74 529.67 T
2 12 Q
(/ QUIT WINDOW /) 423.53 529.67 T
(CHANGE WINDOW /) 103.8 508 T
2 10 Q
(\050Back to the main window\051) 221.77 508 T
0 12 Q
(CAST MODEL DISPLA) 72 473 T
(Y) 198.24 473 T
2 F
(CAST MODEL / BLANK / SAND CORE / BLANK / DIE COMP) 103.8 445 T
2 10 Q
-0.11 (\050Select both the COPE and the DRAG\051) 103.8 424 P
2 12 Q
-0.13 ( / DONE SEL / BLANK / CAST  RESUL) 259.8 424 P
-0.13 (T /  UNBLANK) 459.2 424 P
(/ REF MODEL / BLANK / REF MODEL /) 103.8 403 T
2 10 Q
(\050Select the GEARBOX_REAR\051) 314.81 403 T
2 12 Q
( / DONE SEL /) 443.13 403 T
(DONE|RETURN  /  REGENERA) 103.8 382 T
(TE /) 265.52 382 T
2 10 Q
(\050Pick the visible part\051) 289.52 382 T
2 12 Q
( / DONE) 375.9 382 T
0 F
(CAST MODEL FEA) 72 347 T
(TURE SUPPRESSION) 178.45 347 T
2 F
-0.16 (ENVIRONMENT / SHADING / DONE|RETURN /) 103.8 317.67 P
2 14 Q
-0.18 ({zz}) 356.57 317.67 P
2 9 Q
-0.12 (VIEW) 382.44 317.67 P
-0.12 (, P) 405.1 317.67 P
-0.12 (AN|ZOOM, ZOOM IN) 413.66 317.67 P
2 12 Q
-0.16 ( / CAST) 497.46 317.67 P
(FEA) 103.8 296 T
(TURE / REF MODEL / FEA) 125.14 296 T
(TURE OPER / SUPPRESS / LA) 264.14 296 T
(YER / CAST /) 420.07 296 T
(DONE SEL / DONE / DONE / DONE|RETURN) 103.8 275 T
0 F
(SHRINKAGE) 72 240 T
2 F
(SHRINKAGE /  INFO / BY SCALING  / DONE / SEL BY MENU /) 103.8 212 T
-0.05 (GEARBOX_FRONT) 103.8 191 P
-0.05 (.PR) 206.24 191 P
-0.05 (T / CS0 /  [) 223.2 191 P
3 F
-0.12 (.02) 276.64 191 P
2 F
-0.05 (]  /  [) 298.24 191 P
3 F
-0.12 (.02) 321.37 191 P
2 F
-0.05 (]  /  [) 342.97 191 P
3 F
-0.12 (.02) 366.11 191 P
2 F
-0.05 (]  /   INFO / DONE|RETURN /) 387.71 191 P
2 14 Q
({sd}) 103.8 168.67 T
2 9 Q
(VIEW) 129.69 168.67 T
(, COSMETIC, SHADE, DISPLA) 152.35 168.67 T
(Y) 272.02 168.67 T
(, DONE|RETURN) 277.36 168.67 T
2 12 Q
(   /  DONE|RETURN) 344.65 168.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 2
%%Page: "11" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING PICKS) 250.97 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(PICKS) 72 24 T
(PTC Confidential) 270.58 24 T
(4-11) 521.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 576 612 648 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
( CASTING) 0 -270 594.05 584.4 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0 X
0 0 0 1 0 0 0 K
(THICKNESS CHECK) 72 712 T
2 F
(  CAST MODEL / CAST  CHECK / THICKNESS CK / MAKE SLICES / DONE) 103.8 684 T
2 10 Q
(\050Pick the GEARBOX_FRONT part displayed on the screen\051) 103.8 661.67 T
2 12 Q
( /) 345.71 661.67 T
2 14 Q
({vr}) 355.05 661.67 T
2 9 Q
(VIEW) 383.65 661.67 T
(, REP) 406.31 661.67 T
(AINT) 426.49 661.67 T
(, DONE|RETURN) 447.31 661.67 T
2 10 Q
(\050Pick a start point on the front \337ange\051) 103.8 640 T
2 12 Q
( /) 254.06 640 T
2 10 Q
(\050Pick an end point on the rear \337ange\051 / \050Pick the front \337ange as the) 263.39 640 T
(reference plane\051) 103.8 619 T
2 12 Q
( / FLIP / OKA) 168.48 619 T
(Y / [) 236.71 619 T
3 F
(10) 258.71 619 T
2 F
(] / [) 273.11 619 T
3 F
(35) 290.43 619 T
2 F
(] / NEXT) 304.83 619 T
(.......) 349.27 619 T
2 9 Q
(\050X10\051) 370.27 619 T
2 12 Q
( /) 391.76 619 T
2 10 Q
(\050Keep stepping through until a) 401.1 619 T
(region of violation highlights\051 /) 103.8 598 T
2 12 Q
(INFO /) 234.36 598 T
2 10 Q
(\050Go to the indicated slices\051) 271.69 598 T
2 12 Q
( / DONE|RETURN /) 379.45 598 T
(DONE|RETURN / CAST FEA) 103.8 577 T
(TURE / REF MODEL / FEA) 251.87 577 T
(TURE OPER / MODIFY  /) 390.88 577 T
(SEL BY MENU / NUMBER / [) 103.8 556 T
3 F
(60) 257.14 556 T
2 F
(] /) 271.54 556 T
2 10 Q
(\050Pick on the 50 dimension and change it to 35 millimeters\051) 284.87 556 T
2 12 Q
( /) 519.86 556 T
([35] /  REGENERA) 103.8 533.67 T
(TE /) 198.79 533.67 T
2 10 Q
(\050Select the part\051) 222.79 533.67 T
2 12 Q
( / DONE SEL / DONE / DONE /) 286.66 533.67 T
2 14 Q
({vs}) 451.31 533.67 T
2 9 Q
(VIEW) 477.2 533.67 T
(, ORIEN-) 499.86 533.67 T
(T) 103.8 510.67 T
(A) 108.58 510.67 T
(TION, SPIN) 114.08 510.67 T
2 12 Q
( /) 159.57 510.67 T
2 14 Q
({vd}) 168.91 510.67 T
2 9 Q
(VIEW) 196.35 510.67 T
(, ORIENT) 219.01 510.67 T
(A) 255.78 510.67 T
(TION, DEF) 261.28 510.67 T
(AUL) 303.61 510.67 T
(T) 321.28 510.67 T
(, DONE|RETURN) 326.11 510.67 T
2 12 Q
( /) 393.4 510.67 T
2 14 Q
({zz}) 402.74 510.67 T
2 9 Q
(VIEW) 428.61 510.67 T
(, P) 451.27 510.67 T
(AN|ZOOM, ZOOM) 459.95 510.67 T
(IN) 103.8 489 T
2 12 Q
(/  DONE|RETURN) 115.79 489 T
0 F
(DRAFT CHECK) 72 454 T
2 F
(CAST MODEL  /  CAST  CHECK  /  DRAFT  CHECK /  DONE  /) 103.8 426 T
2 10 Q
(\050Select the \337at face of the) 432.14 426 T
(top boss\051) 103.8 405 T
2 12 Q
( /) 142.69 405 T
2 10 Q
(\050Pick on the part\051) 152.03 405 T
2 12 Q
( /   OKA) 221.74 405 T
(Y  /  [1.5]   /   DONE|RETURN /) 261.96 405 T
(DONE|RETURN@CAST MODEL /) 103.8 384 T
0 F
(RIB DRAFT) 72 349 T
2 F
(CAST FEA) 103.8 319.67 T
(TURE / REF MODEL / DRAFT / DONE / DONE /) 158.81 319.67 T
2 14 Q
({zz}) 413.47 319.67 T
2 9 Q
(VIEW) 442.34 319.67 T
(, P) 465.01 319.67 T
(AN|ZOOM,) 473.68 319.67 T
(ZOOM IN) 103.8 296.67 T
2 10 Q
(\050Zoom in to the two lower ribs on the right hand side\051) 145.04 296.67 T
2 12 Q
( /) 360.3 296.67 T
2 14 Q
({dh}) 369.64 296.67 T
2 9 Q
(ENVIRONMENT) 400.08 296.67 T
(,  HIDDEN LINE,) 465.4 296.67 T
(DONE|RETURN  /) 103.8 275 T
2 10 Q
( \050Select the lower rib\325) 178.09 275 T
(s vertical wall -- feature 52\051) 264.74 275 T
2 12 Q
( /) 376.09 275 T
2 10 Q
(\050Pick same rib\325) 388.43 275 T
(s underside\051) 448.98 275 T
2 12 Q
( /) 497.58 275 T
2 10 Q
(\050Now) 506.92 275 T
-0.23 (select the top wall of the rib\051) 103.8 254 P
2 12 Q
-0.28 ( / DONE SEL / DONE / USE NEUT PLN / [) 217.4 254 P
3 F
-0.66 (-15) 430.02 254 P
2 F
-0.28 (] / DONE /  \050OK\051) 451.62 254 P
-0.27 (/ FEA) 103.8 233 P
-0.27 (TURE OPER / P) 131.2 233 P
-0.27 (A) 210.29 233 P
-0.27 (TTERN / QUER) 217.62 233 P
-0.27 (Y SEL /) 297.08 233 P
2 10 Q
-0.23 (\050Choose the previously created draft feature -- fea-) 338.61 233 P
(ture 66\051) 103.8 210.67 T
2 12 Q
( /) 135.18 210.67 T
2 14 Q
({ds}) 144.52 210.67 T
2 9 Q
(ENVIRONMENT) 173.9 210.67 T
(, SHADING, DONE|RETURN) 239.22 210.67 T
2 12 Q
( /) 351.51 210.67 T
2 14 Q
({zr}) 360.84 210.67 T
2 9 Q
(VIEW) 388.16 210.67 T
(, P) 410.82 210.67 T
(AN|ZOOM, RESET) 419.5 210.67 T
(,) 492.13 210.67 T
(DONE|RETURN) 103.8 189 T
2 12 Q
( / DONE) 166.59 189 T
0 F
(T) 72 154 T
(OP BOSS SPLIT DRAFT) 79.79 154 T
2 F
(CAST / DRAFT / DONE / SPLIT A) 103.8 126 T
(T SKT / DONE / VIEW / P) 277.48 126 T
(AN|ZOOM /) 408.7 126 T
(DONE|RETURN  /  QUER) 103.8 103.67 T
(Y SEL / DONE SEL /  DONE /) 234.86 103.67 T
2 14 Q
({dd}) 389.86 103.67 T
2 9 Q
(ENVIRONMENT) 420.3 103.67 T
(, DISP DTM-) 485.62 103.67 T
-0.01 (PLN, DONE|RETURN) 103.8 82 P
2 12 Q
-0.01 ( /) 188.08 82 P
2 10 Q
-0.01 (\050Select the VER) 197.4 82 P
-0.01 (TICAL datum\051) 261.77 82 P
2 12 Q
-0.01 ( /) 322.02 82 P
2 10 Q
-0.01 (\050Pick the back surface of the boss, the top [curved]) 334.32 82 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 3
%%Page: "12" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING PICKS) 250.97 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(4-12) 72 24 T
(PTC Confidential) 270.58 24 T
(PICKS) 511.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.96 (surface,the front surface and one of the surfaces of the thru hole\051) 103.8 712 P
2 12 Q
-1.16 ( /  RIGHT  /   VIEW / P) 351.99 712 P
-1.16 (AN|ZOOM /) 453.97 712 P
2 14 Q
-0.1 ({ds}) 103.8 689.67 P
2 9 Q
-0.06 (ENVIRONMENT) 133.09 689.67 P
-0.06 (, SHADING, DONE|RETURN) 198.41 689.67 P
2 12 Q
-0.08 ( /) 310.57 689.67 P
2 10 Q
-0.07 (\050Select the HORIZONT) 322.65 689.67 P
-0.07 (AL datum plane\051) 417.8 689.67 P
2 12 Q
-0.08 ( /) 485.98 689.67 P
2 10 Q
-0.07 (\050Select the) 495.15 689.67 P
-0.03 (VER) 103.8 666.67 P
-0.03 (TICAL datum\051) 123.2 666.67 P
2 12 Q
-0.03 ( /) 183.44 666.67 P
2 14 Q
-0.04 ({dh}) 192.71 666.67 P
2 9 Q
-0.03 (ENVIRONMENT) 223.61 666.67 P
-0.03 (, HIDDEN LINE, DONE|RETURN) 288.93 666.67 P
2 12 Q
-0.03 (/ SKETCH /) 420.35 666.67 P
2 10 Q
-0.03 (\050Sketch a line) 482.59 666.67 P
(aligned with the VER) 103.8 645 T
(TICAL datum and the rear of front \337ange, front of rear \337ange\051) 190.14 645 T
2 12 Q
( /) 440.07 645 T
(ALIGNMENT) 448.65 645 T
(/) 522.22 645 T
-0.1 (REGENERA) 103.8 624 P
-0.1 (TE / DONE / [) 166.46 624 P
3 F
-0.24 (5) 236.72 624 P
2 F
-0.1 (] / [) 243.92 624 P
3 F
-0.24 (-5) 261.05 624 P
2 F
-0.1 (] /  \050OK\051  / DONE|RETURN  /  SET UP   /) 275.45 624 P
(X-SECTION /  SECTION /) 103.8 601.67 T
2 14 Q
({vd}) 239.46 601.67 T
2 9 Q
(VIEW) 269.9 601.67 T
(, ORIENT) 292.56 601.67 T
(A) 329.33 601.67 T
(TION, DEF) 334.83 601.67 T
(AUL) 377.16 601.67 T
(T) 394.83 601.67 T
(, DONE|RETURN) 399.66 601.67 T
2 12 Q
( / DONE /) 466.95 601.67 T
(VIEW  /  P) 103.8 580 T
(AN|ZOOM  /  CAST FEA) 156.02 580 T
(TURE / REF MODEL / SOLID / ROUND / EDGE /) 281.42 580 T
(DONE / CHAIN  /) 103.8 559 T
2 10 Q
(\050Select all edges of the top boss including the inside diameter of the hole --QUER) 196.79 559 T
(Y) 523.42 559 T
(SEL may be necessary in order to get all appropriate edges\051) 103.8 538 T
2 9 Q
( /) 342.63 538 T
2 12 Q
(DONE SEL / DONE / ENTER / [) 349.63 538 T
3 F
(3) 511.28 538 T
2 F
(] /) 518.48 538 T
(VIEW / P) 103.8 515.67 T
(AN|ZOOM /) 150.02 515.67 T
2 14 Q
({vs}) 214.41 515.67 T
2 9 Q
(VIEW) 243.3 515.67 T
(, ORIENT) 265.96 515.67 T
(A) 302.74 515.67 T
(TION, SPIN) 308.24 515.67 T
2 12 Q
( /) 353.73 515.67 T
2 14 Q
({vr}) 363.07 515.67 T
2 9 Q
(VIEW) 391.17 515.67 T
(, REP) 413.83 515.67 T
(AINT) 434.01 515.67 T
(, DONE|RETURN) 454.83 515.67 T
2 12 Q
(/) 524.63 515.67 T
2 14 Q
({vd}) 103.8 492.67 T
2 9 Q
(VIEW) 134.24 492.67 T
(, ORIENT) 156.9 492.67 T
(A) 193.68 492.67 T
(TION, DEF) 199.17 492.67 T
(AUL) 241.5 492.67 T
(T) 259.17 492.67 T
(, DONE|RETURN) 264 492.67 T
2 12 Q
( / VIEW / P) 331.29 492.67 T
(AN|ZOOM /) 386.85 492.67 T
0 F
(FRONT FLANGE OFFSET AND DRAFT) 72 457 T
2 F
(CAST / OFFSET AREA / WHOLE SURF / DONE /) 103.8 429 T
2 10 Q
(\050Choose front face of the front \337ange\051) 360.48 429 T
2 12 Q
( /) 512.66 429 T
(DONE SEL / [) 103.8 406.67 T
3 F
(6) 174.79 406.67 T
2 F
(] / CAST / DRAFT /  DONE  /  SPLIT A) 181.99 406.67 T
(T SKT / DONE /) 378 406.67 T
2 14 Q
({dd}) 462.99 406.67 T
2 9 Q
(ENVIRON-) 493.43 406.67 T
(MENT) 103.8 385 T
(, DISP DTMPLN, DONE|RETURN) 128.63 385 T
2 12 Q
( / {dd}) 259.17 385 T
2 9 Q
(ENVIRONMENT) 295.03 385 T
(, DISPDTPLN, DONE|RETURN) 360.35 385 T
2 12 Q
(  /) 480.65 385 T
2 10 Q
(\050Pick the) 495.98 385 T
(VER) 103.8 364 T
(TICAL datum\051) 123.2 364 T
(\050Choose the back surface of the FRONT \337ange, and the front surface of the FRONT) 186.47 364 T
-0.13 (\337ange\051) 103.8 341.67 P
2 12 Q
-0.15 ( / DONE SEL / DONE /) 131.57 341.67 P
2 14 Q
-0.18 ( {xx}) 246.65 341.67 P
2 9 Q
-0.12 (VIEW) 280.25 341.67 P
-0.12 (, P) 302.92 341.67 P
-0.12 (AN|ZOOM, ZOOM OUT) 311.48 341.67 P
2 12 Q
-0.15 ( /) 404.28 341.67 P
2 10 Q
-0.13 (\050Select datum plane FRONT\051) 413.31 341.67 P
2 12 Q
-0.15 ( /) 530.97 341.67 P
2 10 Q
(\050Select datum plane VER) 103.8 320 T
(TICAL\051) 205.13 320 T
2 12 Q
( /) 237.9 320 T
(SKETCH / ALIGNMENT /) 249.49 320 T
2 10 Q
(\050Sketch a line aligned to VER) 385.39 320 T
(TICAL) 504.5 320 T
-0.01 (datum and aligned to the extreme edges on the right and on the left\051) 103.8 299 P
2 12 Q
-0.01 ( / REGENERA) 374.48 299 P
-0.01 (TE / DONE /) 446.46 299 P
-0.21 ([-) 103.8 276.67 P
3 F
-0.51 (1.5) 111.79 276.67 P
2 F
-0.21 (] / [) 133.39 276.67 P
3 F
-0.51 (1.5) 150.29 276.67 P
2 F
-0.21 (] / \050OK\051 /) 171.9 276.67 P
2 14 Q
-0.25 ({tv}) 221.82 276.67 P
2 9 Q
-0.16 (VIEW) 248.94 276.67 P
-0.16 (, NAMES, RETRIEVE, T) 271.6 276.67 P
-0.16 (OP) 364.96 276.67 P
-0.16 (, DONE|RETURN) 375.46 276.67 P
2 12 Q
-0.21 ( /) 444.92 276.67 P
2 14 Q
-0.25 ({vs}) 453.83 276.67 P
2 9 Q
-0.16 (VIEW) 482.51 276.67 P
-0.16 (, ORIEN-) 505.17 276.67 P
(T) 103.8 253.67 T
(A) 108.58 253.67 T
(TION, SPIN / DONE|RETURN) 114.08 253.67 T
2 12 Q
( /) 229.37 253.67 T
2 14 Q
({vd}) 238.7 253.67 T
2 9 Q
(VIEW) 269.14 253.67 T
(, ORIENT) 291.8 253.67 T
(A) 328.58 253.67 T
(TION, DEF) 334.08 253.67 T
(AUL) 376.4 253.67 T
(T) 394.07 253.67 T
(, DONE|RETURN) 398.9 253.67 T
2 12 Q
(/ VIEW /) 468.7 253.67 T
(P) 103.8 232 T
(AN|ZOOM /) 109.37 232 T
0 F
(SAND CORE CREA) 72 197 T
(TION) 178.44 197 T
2 F
(CAST MODEL / CREA) 103.8 169 T
(TE / SAND CORE / [) 220.14 169 T
3 F
(core_front) 325.14 169 T
2 F
(] / GA) 397.14 169 T
(THER VOL / DONE /) 426.47 169 T
(DONE /) 103.8 148 T
2 10 Q
(\050Pick any inside surface\051) 146.46 148 T
2 12 Q
( /) 245.6 148 T
2 10 Q
(\050Select the four \337ange surfaces -- front left, front right; rear left, rear) 257.93 148 T
-0.12 (right\051) 103.8 125.67 P
2 12 Q
-0.15 ( / DONE / DONE SEL / DONE REFS / DONE|RETURN / DONE) 126.02 125.67 P
-0.15 ( / MAKE DA) 447.27 125.67 P
-0.15 (TUM) 510.48 125.67 P
-0.13 (/ OFFSET /) 103.8 104 P
2 10 Q
-0.11 (\050Choose datum REAR\051) 162.42 104 P
2 12 Q
-0.13 ( / ENTER V) 255.53 104 P
-0.13 (ALUE / [) 313.25 104 P
3 F
-0.32 (-10) 358.31 104 P
2 F
-0.13 (] / DONE /) 379.91 104 P
2 10 Q
-0.11 (\050Pick the back edge loop\051) 435.37 104 P
2 12 Q
-0.19 (/ DONE SEL / DONE / MAKE DA) 103.8 83 P
-0.19 (TUM / OFFSET /) 272.8 83 P
2 10 Q
-0.16 (\050Pick datum FRONT\051) 360.73 83 P
2 12 Q
-0.19 ( / ENTER V) 447.64 83 P
-0.19 (ALUE) 505.2 83 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 4
%%Page: "13" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING PICKS) 250.97 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(PICKS) 72 24 T
(PTC Confidential) 270.58 24 T
(4-13) 521.67 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
576 576 612 648 R
V
0 0 0 0 1 1 1 K
2 12 Q
7 X
0 0 0 0 1 1 1 K
( CASTING) 0 -270 594.05 584.4 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(/ [) 103.8 712 T
3 F
(10) 114.13 712 T
2 F
(] / DONE /) 128.53 712 T
2 10 Q
(\050Pick the front edge loop\051) 184.52 712 T
2 12 Q
( / DONE SEL / DONE /  DONE SEL /) 287.28 712 T
(DONE|RETURN /) 103.8 689.67 T
2 14 Q
({dd}) 196.86 689.67 T
2 9 Q
(ENVIRONMENT) 227.3 689.67 T
(, DISP DTMPLN, DONE|RETURN) 292.62 689.67 T
2 12 Q
( /) 423.17 689.67 T
2 14 Q
({tv}) 432.5 689.67 T
2 9 Q
(VIEW) 459.83 689.67 T
(, NAMES,) 482.5 689.67 T
(RETRIEVE, T) 103.8 666.67 T
(OP) 157.13 666.67 T
(, DONE|RETURN) 167.64 666.67 T
2 12 Q
( / VIEW / P) 234.93 666.67 T
(AN|ZOOM / SHOW VOLUME / DONE /) 290.49 666.67 T
2 14 Q
({scf}) 496.53 666.67 T
2 9 Q
(MODE, P) 103.8 647 T
(AR) 138.97 647 T
(T) 150.93 647 T
(, RETRIEVE,) 155.77 647 T
(core_front, VIEW) 208.26 647 T
(, COSMETIC, SHADE, DISPLA) 272.91 647 T
(Y) 392.58 647 T
(, DONE|RETURN, VIEW) 397.92 647 T
(, ORIENT) 492.37 647 T
(A-) 529.15 647 T
-0.29 (TION, SPIN) 103.8 627 P
2 12 Q
-0.39 (/ COSMETIC / APPERANCES / SET /) 151.18 627 P
2 10 Q
-0.33 (\050Choose yellow\051) 341.47 627 P
2 12 Q
-0.39 ( / P) 407.52 627 P
-0.39 (AR) 421.65 627 P
-0.39 (T / QUIT WINDOW) 437.6 627 P
(/ CHANGE WINDOW /) 103.8 604.67 T
2 14 Q
({vd}) 225.11 604.67 T
2 9 Q
(VIEW) 255.55 604.67 T
(, ORIENT) 278.21 604.67 T
(A) 314.98 604.67 T
(TION, DEF) 320.48 604.67 T
(AUL) 362.81 604.67 T
(T) 380.48 604.67 T
(, DONE|RETURN) 385.31 604.67 T
2 12 Q
( /) 452.6 604.67 T
2 14 Q
({vs}) 461.94 604.67 T
2 9 Q
(VIEW) 490.82 604.67 T
(, ORI-) 513.49 604.67 T
(ENT) 103.8 581.67 T
(A) 120.58 581.67 T
(TION, SPIN) 126.07 581.67 T
2 12 Q
( /) 171.57 581.67 T
2 14 Q
({vd}) 180.91 581.67 T
2 9 Q
(VIEW) 211.35 581.67 T
(, ORIENT) 234.01 581.67 T
(A) 270.78 581.67 T
(TION, DEF) 276.28 581.67 T
(AUL) 318.61 581.67 T
(T) 336.27 581.67 T
(, DONE|RETURN) 341.11 581.67 T
0 12 Q
(MODEL UPDA) 72 539 T
(TE) 152.77 539 T
2 F
(CAST MODEL / BLANK / REF MODEL / UNBLANK / SAND CORE  / UNBLANK /) 103.8 511 T
(CAST RESUL) 103.8 488.67 T
(T /) 174.37 488.67 T
2 14 Q
({dh}) 191.04 488.67 T
2 9 Q
(ENVIRONMENT) 221.48 488.67 T
(, HIDDEN LINE, DONE|RETURN) 286.8 488.67 T
2 12 Q
( / UNBLANK /) 415.83 488.67 T
-0.1 (DIE COMP / BLANK  / DIE COMP /) 103.8 467 P
2 10 Q
-0.09 (\050Choose the COPE\051) 289.19 467 P
2 12 Q
-0.1 ( / DONE SEL / DONE|RETURN  /) 368.45 467 P
-0.29 (REGENERA) 103.8 444.67 P
-0.29 (TE / AUT) 166.46 444.67 P
-0.29 (OMA) 214.32 444.67 P
-0.29 (TIC /) 240.99 444.67 P
2 14 Q
-0.34 ({ss}) 269.07 444.67 P
2 9 Q
-0.22 (VIEW COSMETIC, SHADE, DISPLA) 296.11 444.67 P
-0.22 (Y) 436.36 444.67 P
-0.22 (, DONE|RETURN, VIEW) 441.7 444.67 P
-0.22 (,) 535.72 444.67 P
(ORIENT) 103.8 421.67 T
(A) 136.07 421.67 T
(TION, SPIN) 141.57 421.67 T
2 12 Q
(/) 189.57 421.67 T
2 14 Q
({vd}) 195.9 421.67 T
2 9 Q
(VIEW) 226.34 421.67 T
(, ORIENT) 249.01 421.67 T
(A) 285.78 421.67 T
(TION, DEF) 291.28 421.67 T
(AUL) 333.61 421.67 T
(T) 351.27 421.67 T
(, DONE|RETURN) 356.11 421.67 T
2 12 Q
( /) 423.4 421.67 T
0 F
(INTERFERENCE CHECKING) 72 386 T
2 F
(DIE OPENING /  DEFINE STEP / DEFINE MOVE /) 103.8 358 T
2 10 Q
(\050Select the CORE_FRONT\051) 365.11 358 T
2 12 Q
(  /) 477.88 358 T
(DONE SEL /) 103.8 337 T
2 10 Q
(\050Select an edge such that the direction of movement will make the core move through the) 170.8 337 T
-0.09 (right side of the cast result\051) 103.8 316 P
2 12 Q
-0.1 (  / [) 212.51 316 P
3 F
-0.25 (300) 228.53 316 P
2 F
-0.1 (] / INTERFERENCE /) 250.13 316 P
2 10 Q
-0.09 (\050Select the cast RESUL) 361.05 316 P
-0.09 (T as the static part\051) 454.57 316 P
2 12 Q
-0.1 ( /) 530.87 316 P
2 14 Q
({vr}) 103.8 293.67 T
2 9 Q
(VIEW) 131.9 293.67 T
(, REP) 154.56 293.67 T
(AINT) 174.74 293.67 T
(, DONE|RETURN) 195.57 293.67 T
2 12 Q
( / DONE|RETURN / DONE /) 262.86 293.67 T
2 14 Q
({sd}) 407.92 293.67 T
2 9 Q
(VIEW) 436.8 293.67 T
(, COSMETIC,) 459.46 293.67 T
(SHADE, DISPLA) 103.8 272 T
(Y) 168.97 272 T
(, DONE|RETURN) 174.31 272 T
2 12 Q
(/ DONE|RETURN) 244.1 272 T
0 F
(PREP) 72 237 T
(ARA) 102.44 237 T
(TION VIEW) 127.55 237 T
2 F
(CAST MODEL / UNBLANK / REF MODEL /) 103.8 207.67 T
2 14 Q
({sv}) 334.46 207.67 T
2 9 Q
(VIEW) 363.35 207.67 T
(, NAMES, RETRIEVE, SIDE,) 386.01 207.67 T
(DONE|RETURN) 103.8 186 T
2 12 Q
( /  QUIT WINDOW  /) 166.59 186 T
0 F
(DRA) 72 130 T
(WING UPDA) 96.66 130 T
(TE) 166.76 130 T
2 F
(DRA) 103.8 102 T
(WING / SERACH-RETR / GEARBOX_DRA) 128.17 102 T
(WING.DR) 349.87 102 T
(W /MODE /MARKUP /) 401.53 102 T
(GEARBOX_DRA) 103.8 81 T
(WING.DR) 192.17 81 T
(W / GEARBOX_MARKUP  /          QUIT WINDOW /) 243.83 81 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 5
%%Page: "14" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(CASTING PICKS) 250.97 746.67 T
72 30.67 540 42.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 41.67 540 41.67 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 38.67 540 38.67 2 L
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(4-14) 72 24 T
(PTC Confidential) 270.58 24 T
(PICKS) 511.62 24 T
71.4 744 540.59 743.4 2 L
0.9 H
2 Z
N
540.59 740.4 71.4 740.4 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
-0.39 (CHANGE WINDOW) 103.8 712 P
2 10 Q
-0.32 (\050Back to the main window\051 /) 211.66 712 P
2 12 Q
-0.39 (MODIFY /) 326.92 712 P
2 10 Q
-0.32 (\050Modify 180 to 150, 15 to 30, 60 to 30\051) 382.81 712 P
2 12 Q
([150] , [30], [30]  / REGENERA) 103.8 691 T
(TE / MODEL / AUT) 259.77 691 T
(OMA) 360.21 691 T
(TIC /   QUIT WINDOW) 386.88 691 T
(/) 505.85 691 T
0 F
(FINAL UPDA) 72 656 T
(TE) 144.77 656 T
2 F
(CAST / SEARCH|RETR / CASTING.MFG / ENVIRONMENT / SHADING /) 103.8 628 T
(DONE|RETURN /) 103.8 605.67 T
2 14 Q
({ds}) 196.86 605.67 T
2 9 Q
(ENVIRONMENT) 225.74 605.67 T
(, DISP CSYS, DONE|RETURN) 291.07 605.67 T
2 12 Q
( /) 407.12 605.67 T
2 14 Q
({scf}) 416.46 605.67 T
2 9 Q
(MODE, P) 449.22 605.67 T
(AR) 484.39 605.67 T
(T) 496.36 605.67 T
(,) 501.19 605.67 T
(RETRIEVE, core_front, VIEW) 103.8 584 T
(, COSMETIC, SHADE, DISPLA) 216.44 584 T
(Y) 336.12 584 T
(, DONE|RETURN, VIEW) 341.45 584 T
(, ORIENT) 435.91 584 T
(A) 472.68 584 T
(TION, SPIN) 478.18 584 T
2 12 Q
(/) 526.18 584 T
(REGENERA) 103.8 563 T
(TE / QUIT WINDOW / CHANGE WINDOW / CAST MODEL / BLANK /) 166.46 563 T
(REF MODEL /) 103.8 542 T
2 10 Q
(\050Select both the GEARBOX_FRONT and the GEARBOX_REAR\051) 180.8 542 T
2 12 Q
( / DONE SEL /) 449.67 542 T
(DONE|RETURN / REGENERA) 103.8 519.67 T
(TE / AUT) 259.52 519.67 T
(OMA) 307.97 519.67 T
(TIC /) 334.63 519.67 T
2 14 Q
({vd}) 363.3 519.67 T
2 9 Q
(VIEW) 393.74 519.67 T
(, ORIENT) 416.4 519.67 T
(A) 453.17 519.67 T
(TION, DEF) 458.67 519.67 T
(AUL) 501 519.67 T
(T) 518.67 519.67 T
(,) 523.5 519.67 T
(DONE|RETURN) 103.8 496.67 T
2 12 Q
( /) 166.59 496.67 T
2 14 Q
({spc}) 175.93 496.67 T
2 12 Q
( /) 208.03 496.67 T
2 14 Q
({spd}) 217.37 496.67 T
2 12 Q
( /) 250.25 496.67 T
2 14 Q
({scr}) 259.59 496.67 T
2 12 Q
( /) 289.35 496.67 T
2 14 Q
({scf}) 298.69 496.67 T
2 12 Q
( /) 328.45 496.67 T
2 14 Q
({spr}) 337.79 496.67 T
2 12 Q
( / EXIT) 368.34 496.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 6
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-Roman
%%+ Courier
%%EOF
