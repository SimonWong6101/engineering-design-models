!* The file structure of this STEP file is based on the
   Document 284 of ISO TC184/SC4/WG1 - Oct. 27, 1988, and
   Document Title:ISO STEP Baseline Requirements Document (IPIM). 
   This STEP file has been presented in a line-oriented or 
   record-oriented manner in order to aid readability.
   Unnecessary spaces have also been added to aid readability. 
   Note that an ordinary STEP file is not aligned in this
   manner, but is instead a continuous stream of characters.
*!

STEP;

HEADER;
 FILE_IDENTIFICATION(
 'XTRACTPMTEST',
 '19890814.115041',
 'Tina Lee & Sandy Ressler, (301)-975-3550 or 3549',
 'National Bureau of Standards, Factory Automation Systems Division',
 'STEP VERSION 1.0',
 'AMRF Part Model to Step File Translator, Version 1.0',
 'AMRF PART MODEL');
 FILE_DESCRIPTION('THIS FILE IS TRANSLATED FROM AN AMRF PART MODEL FILE');
 IMP_LEVEL('1.0');
ENDSEC;

DATA;
@1 = CARTESIAN_POINT( , 0.000000, 3.805000, 0.519000);
@2 = CARTESIAN_POINT( , 0.000000, 3.805000, 0.369000);
@3 = CARTESIAN_POINT( , 0.000000, 2.975000, 0.369000);
@4 = CARTESIAN_POINT( , 0.000000, 2.975000, 0.000000);
@5 = CARTESIAN_POINT( , 0.000000, 2.775000, 0.000000);
@6 = CARTESIAN_POINT( , 0.000000, 2.775000, -1.600000);
@7 = CARTESIAN_POINT( , 0.000000, 4.805000, -1.600000);
@8 = CARTESIAN_POINT( , 0.000000, 4.805000, 0.519000);
@9 = CARTESIAN_POINT( , 6.300000, 3.805000, 0.519000);
@10 = CARTESIAN_POINT( , 6.300000, 3.805000, 0.369000);
@11 = CARTESIAN_POINT( , 6.300000, 2.975000, 0.369000);
@12 = CARTESIAN_POINT( , 6.300000, 2.975000, 0.000000);
@13 = CARTESIAN_POINT( , 6.300000, 2.775000, 0.000000);
@14 = CARTESIAN_POINT( , 6.300000, 2.775000, -1.600000);
@15 = CARTESIAN_POINT( , 6.300000, 4.805000, -1.600000);
@16 = CARTESIAN_POINT( , 6.300000, 4.805000, 0.519000);
!* Done Points *!

@17 = DIRECTION( , 0.000000, 0.000000, -1.000000);
@18 = DIRECTION( , 0.000000, -1.000000, 0.000000);
@19 = DIRECTION( , 0.000000, 1.000000, 0.000000);
@20 = DIRECTION( , 0.000000, 0.000000, 1.000000);
@21 = DIRECTION( , 1.000000, 0.000000, 0.000000);
!* Done UnitVectors *!

@22 = LINE( , #1, #17);
@23 = LINE( , #2, #18);
@24 = LINE( , #3, #17);
@25 = LINE( , #4, #18);
@26 = LINE( , #5, #17);
@27 = LINE( , #6, #19);
@28 = LINE( , #7, #20);
@29 = LINE( , #8, #18);
@30 = LINE( , #9, #17);
@31 = LINE( , #10, #18);
@32 = LINE( , #11, #17);
@33 = LINE( , #12, #18);
@34 = LINE( , #13, #17);
@35 = LINE( , #14, #19);
@36 = LINE( , #15, #20);
@37 = LINE( , #16, #18);
@38 = LINE( , #2, #21);
@39 = LINE( , #1, #21);
@40 = LINE( , #3, #21);
@41 = LINE( , #4, #21);
@42 = LINE( , #5, #21);
@43 = LINE( , #6, #21);
@44 = LINE( , #7, #21);
@45 = LINE( , #8, #21);
!* Done Curves *!

@46 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 0.000000, 0.000000), #21, ));
@47 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 6.300000, 0.000000, 0.000000), #21, ));
@48 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 3.805000, 0.000000), #18, ));
@49 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 0.000000, 0.369000), #20, ));
@50 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 2.975000, 0.000000), #18, ));
@51 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 0.000000, 0.000000), #20, ));
@52 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 2.775000, 0.000000), #18, ));
@53 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 0.000000, -1.600000), #17, ));
@54 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 4.805000, 0.000000), #19, ));
@55 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 0.000000, 0.519000), #20, ));
!* Done Surfaces *!

@56 = VERTEX(  #1);
@57 = VERTEX(  #2);
@58 = VERTEX(  #3);
@59 = VERTEX(  #4);
@60 = VERTEX(  #5);
@61 = VERTEX(  #6);
@62 = VERTEX(  #7);
@63 = VERTEX(  #8);
@64 = VERTEX(  #9);
@65 = VERTEX(  #10);
@66 = VERTEX(  #11);
@67 = VERTEX(  #12);
@68 = VERTEX(  #13);
@69 = VERTEX(  #14);
@70 = VERTEX(  #15);
@71 = VERTEX(  #16);
!* Done Vertices *!

@72 = EDGE( #56, #57, CURVE_LOGICAL_STRUCTURE(#22, .T.));
@73 = EDGE( #57, #58, CURVE_LOGICAL_STRUCTURE(#23, .T.));
@74 = EDGE( #58, #59, CURVE_LOGICAL_STRUCTURE(#24, .T.));
@75 = EDGE( #59, #60, CURVE_LOGICAL_STRUCTURE(#25, .T.));
@76 = EDGE( #60, #61, CURVE_LOGICAL_STRUCTURE(#26, .T.));
@77 = EDGE( #61, #62, CURVE_LOGICAL_STRUCTURE(#27, .T.));
@78 = EDGE( #62, #63, CURVE_LOGICAL_STRUCTURE(#28, .T.));
@79 = EDGE( #63, #56, CURVE_LOGICAL_STRUCTURE(#29, .T.));
@80 = EDGE( #64, #65, CURVE_LOGICAL_STRUCTURE(#30, .T.));
@81 = EDGE( #65, #66, CURVE_LOGICAL_STRUCTURE(#31, .T.));
@82 = EDGE( #66, #67, CURVE_LOGICAL_STRUCTURE(#32, .T.));
@83 = EDGE( #67, #68, CURVE_LOGICAL_STRUCTURE(#33, .T.));
@84 = EDGE( #68, #69, CURVE_LOGICAL_STRUCTURE(#34, .T.));
@85 = EDGE( #69, #70, CURVE_LOGICAL_STRUCTURE(#35, .T.));
@86 = EDGE( #70, #71, CURVE_LOGICAL_STRUCTURE(#36, .T.));
@87 = EDGE( #71, #64, CURVE_LOGICAL_STRUCTURE(#37, .T.));
@88 = EDGE( #57, #65, CURVE_LOGICAL_STRUCTURE(#38, .T.));
@89 = EDGE( #56, #64, CURVE_LOGICAL_STRUCTURE(#39, .T.));
@90 = EDGE( #58, #66, CURVE_LOGICAL_STRUCTURE(#40, .T.));
@91 = EDGE( #59, #67, CURVE_LOGICAL_STRUCTURE(#41, .T.));
@92 = EDGE( #60, #68, CURVE_LOGICAL_STRUCTURE(#42, .T.));
@93 = EDGE( #61, #69, CURVE_LOGICAL_STRUCTURE(#43, .T.));
@94 = EDGE( #62, #70, CURVE_LOGICAL_STRUCTURE(#44, .T.));
@95 = EDGE( #63, #71, CURVE_LOGICAL_STRUCTURE(#45, .T.));
!* Done Edges *!

@96 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#79, .F.), 
       EDGE_LOGICAL_STRUCTURE(#78, .F.), 
       EDGE_LOGICAL_STRUCTURE(#77, .F.), 
       EDGE_LOGICAL_STRUCTURE(#76, .F.), 
       EDGE_LOGICAL_STRUCTURE(#75, .F.), 
       EDGE_LOGICAL_STRUCTURE(#74, .F.), 
       EDGE_LOGICAL_STRUCTURE(#73, .F.), 
       EDGE_LOGICAL_STRUCTURE(#72, .F.) ));
@97 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#80, .T.), 
       EDGE_LOGICAL_STRUCTURE(#81, .T.), 
       EDGE_LOGICAL_STRUCTURE(#82, .T.), 
       EDGE_LOGICAL_STRUCTURE(#83, .T.), 
       EDGE_LOGICAL_STRUCTURE(#84, .T.), 
       EDGE_LOGICAL_STRUCTURE(#85, .T.), 
       EDGE_LOGICAL_STRUCTURE(#86, .T.), 
       EDGE_LOGICAL_STRUCTURE(#87, .T.) ));
@98 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#72, .T.), 
       EDGE_LOGICAL_STRUCTURE(#88, .T.), 
       EDGE_LOGICAL_STRUCTURE(#80, .F.), 
       EDGE_LOGICAL_STRUCTURE(#89, .F.) ));
@99 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#73, .T.), 
       EDGE_LOGICAL_STRUCTURE(#90, .T.), 
       EDGE_LOGICAL_STRUCTURE(#81, .F.), 
       EDGE_LOGICAL_STRUCTURE(#88, .F.) ));
@100 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#74, .T.), 
       EDGE_LOGICAL_STRUCTURE(#91, .T.), 
       EDGE_LOGICAL_STRUCTURE(#82, .F.), 
       EDGE_LOGICAL_STRUCTURE(#90, .F.) ));
@101 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#75, .T.), 
       EDGE_LOGICAL_STRUCTURE(#92, .T.), 
       EDGE_LOGICAL_STRUCTURE(#83, .F.), 
       EDGE_LOGICAL_STRUCTURE(#91, .F.) ));
@102 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#76, .T.), 
       EDGE_LOGICAL_STRUCTURE(#93, .T.), 
       EDGE_LOGICAL_STRUCTURE(#84, .F.), 
       EDGE_LOGICAL_STRUCTURE(#92, .F.) ));
@103 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#77, .T.), 
       EDGE_LOGICAL_STRUCTURE(#94, .T.), 
       EDGE_LOGICAL_STRUCTURE(#85, .F.), 
       EDGE_LOGICAL_STRUCTURE(#93, .F.) ));
@104 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#78, .T.), 
       EDGE_LOGICAL_STRUCTURE(#95, .T.), 
       EDGE_LOGICAL_STRUCTURE(#86, .F.), 
       EDGE_LOGICAL_STRUCTURE(#94, .F.) ));
@105 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#79, .T.), 
       EDGE_LOGICAL_STRUCTURE(#89, .T.), 
       EDGE_LOGICAL_STRUCTURE(#87, .F.), 
       EDGE_LOGICAL_STRUCTURE(#95, .F.) ));
!* Done Loops *!

@106 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#96, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#46, .T.));
@107 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#97, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#47, .T.));
@108 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#98, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#48, .T.));
@109 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#99, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#49, .T.));
@110 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#100, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#50, .T.));
@111 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#101, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#51, .T.));
@112 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#102, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#52, .T.));
@113 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#103, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#53, .T.));
@114 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#104, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#54, .T.));
@115 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#105, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#55, .T.));
!* Done Faces *!

@116 = CLOSED_SHELL( (
        FACE_LOGICAL_STRUCTURE(#106,.T.),
        FACE_LOGICAL_STRUCTURE(#107,.T.),
        FACE_LOGICAL_STRUCTURE(#108,.T.),
        FACE_LOGICAL_STRUCTURE(#109,.T.),
        FACE_LOGICAL_STRUCTURE(#110,.T.),
        FACE_LOGICAL_STRUCTURE(#111,.T.),
        FACE_LOGICAL_STRUCTURE(#112,.T.),
        FACE_LOGICAL_STRUCTURE(#113,.T.),
        FACE_LOGICAL_STRUCTURE(#114,.T.),
        FACE_LOGICAL_STRUCTURE(#115,.T.)   ));
!* Done Shells *!

ENDSEC;

ENDSTEP;
