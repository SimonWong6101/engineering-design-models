!* The file structure of this STEP file is based on the
   Document 284 of ISO TC184/SC4/WG1 - Oct. 27, 1988, and
   Document Title:ISO STEP Baseline Requirements Document (IPIM). 
   This STEP file has been presented in a line-oriented or 
   record-oriented manner in order to aid readability.
   Unnecessary spaces have also been added to aid readability. 
   Note that an ordinary STEP file is not aligned in this
   manner, but is instead a continuous stream of characters.
*!

STEP;

HEADER;
 FILE_IDENTIFICATION(
 'XTRACTPMTEST',
 '19890811.152404',
 'Tina Lee & Sandy Ressler, (301)-975-3550 or 3549',
 'National Bureau of Standards, Factory Automation Systems Division',
 'STEP VERSION 1.0',
 'AMRF Part Model to Step File Translator, Version 1.0',
 'AMRF PART MODEL');
 FILE_DESCRIPTION('THIS FILE IS TRANSLATED FROM AN AMRF PART MODEL FILE');
 IMP_LEVEL('1.0');
ENDSEC;

DATA;
@1 = CARTESIAN_POINT( , 0.500000, -1.000000, 1.000000);
@2 = CARTESIAN_POINT( , 1.000000, -0.500000, 1.000000);
@3 = CARTESIAN_POINT( , 1.000000, -0.500000, 0.000000);
@4 = CARTESIAN_POINT( , 0.500000, -1.000000, 0.000000);
@5 = CARTESIAN_POINT( , 1.000000, 0.500000, 1.000000);
@6 = CARTESIAN_POINT( , 0.500000, 1.000000, 1.000000);
@7 = CARTESIAN_POINT( , -0.500000, 1.000000, 1.000000);
@8 = CARTESIAN_POINT( , -1.000000, 0.500000, 1.000000);
@9 = CARTESIAN_POINT( , -1.000000, -0.500000, 1.000000);
@10 = CARTESIAN_POINT( , -0.500000, -1.000000, 1.000000);
@11 = CARTESIAN_POINT( , 1.000000, 0.500000, 0.000000);
@12 = CARTESIAN_POINT( , -0.500000, -1.000000, 0.000000);
@13 = CARTESIAN_POINT( , -1.000000, -0.500000, 0.000000);
@14 = CARTESIAN_POINT( , -1.000000, 0.500000, 0.000000);
@15 = CARTESIAN_POINT( , -0.500000, 1.000000, 0.000000);
@16 = CARTESIAN_POINT( , 0.500000, 1.000000, 0.000000);
@17 = CARTESIAN_POINT( , 0.500000, -0.500000, 1.000000);
@18 = CARTESIAN_POINT( , 0.500000, -0.500000, 0.000000);
@19 = CARTESIAN_POINT( , 0.500000, -1.000000, 0.000000);
@20 = CARTESIAN_POINT( , 0.500000, 0.500000, 1.000000);
@21 = CARTESIAN_POINT( , -0.500000, 0.500000, 1.000000);
@22 = CARTESIAN_POINT( , -0.500000, -0.500000, 1.000000);
@23 = CARTESIAN_POINT( , -1.000000, -0.500000, 1.000000);
@24 = CARTESIAN_POINT( , -0.500000, -0.500000, 0.000000);
@25 = CARTESIAN_POINT( , -1.000000, -0.500000, 0.000000);
@26 = CARTESIAN_POINT( , -0.500000, 0.500000, 0.000000);
@27 = CARTESIAN_POINT( , -0.500000, 1.000000, 0.000000);
@28 = CARTESIAN_POINT( , 0.500000, 0.500000, 0.000000);
@29 = CARTESIAN_POINT( , 0.500000, -0.500000, -0.500000);
@30 = CARTESIAN_POINT( , 0.500000, 0.500000, -0.500000);
@31 = CARTESIAN_POINT( , -0.500000, 0.500000, -0.500000);
@32 = CARTESIAN_POINT( , -0.500000, -0.500000, -0.500000);
!* Done Points *!

@33 = DIRECTION( , 0.000000, 0.000000, 1.000000);
@34 = DIRECTION( , 0.000000, 0.000000, -1.000000);
@35 = DIRECTION( , 0.000000, 1.000000, 0.000000);
@36 = DIRECTION( , -1.000000, 0.000000, 0.000000);
@37 = DIRECTION( , 0.000000, -1.000000, 0.000000);
@38 = DIRECTION( , 1.000000, 0.000000, 0.000000);
!* Done UnitVectors *!

@39 = CIRCLE( , 0.500000, AXIS2_PLACEMENT( , #17, #33, 
       DIRECTION( , 0.000000, -1.000000, 0.000000)));
@40 = LINE( , #2, #34);
@41 = CIRCLE( , 0.500000, AXIS2_PLACEMENT( , #18, #33, 
       DIRECTION( , 0.000000, -1.000000, 0.000000)));
@42 = LINE( , #4, #33);
@43 = LINE( , #2, #35);
@44 = CIRCLE( , 0.500000, AXIS2_PLACEMENT( , #20, #33, 
       DIRECTION( , 1.000000, 0.000000, 0.000000)));
@45 = LINE( , #6, #36);
@46 = CIRCLE( , 0.500000, AXIS2_PLACEMENT( , #21, #33, 
       DIRECTION( , 0.000000, 1.000000, 0.000000)));
@47 = LINE( , #8, #37);
@48 = CIRCLE( , 0.500000, AXIS2_PLACEMENT( , #22, #33, 
       DIRECTION( , -1.000000, 0.000000, 0.000000)));
@49 = LINE( , #10, #38);
@50 = LINE( , #3, #35);
@51 = LINE( , #5, #34);
@52 = LINE( , #12, #38);
@53 = CIRCLE( , 0.500000, AXIS2_PLACEMENT( , #24, #33, 
       DIRECTION( , -1.000000, 0.000000, 0.000000)));
@54 = LINE( , #14, #37);
@55 = CIRCLE( , 0.500000, AXIS2_PLACEMENT( , #26, #33, 
       DIRECTION( , 0.000000, 1.000000, 0.000000)));
@56 = LINE( , #16, #36);
@57 = CIRCLE( , 0.500000, AXIS2_PLACEMENT( , #28, #33, 
       DIRECTION( , 1.000000, 0.000000, 0.000000)));
@58 = LINE( , #10, #34);
@59 = LINE( , #6, #34);
@60 = LINE( , #15, #33);
@61 = LINE( , #8, #34);
@62 = LINE( , #9, #34);
!* Done Curves *!

@63 = CYLINDRICAL_SURFACE( ,  0.500000, AXIS2_PLACEMENT( , #29, #33, ));
@64 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 0.000000, 1.000000), #33, ));
@65 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 1.000000, 0.000000, 0.000000), #38, ));
@66 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 0.000000, 0.000000), #34, ));
@67 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, -1.000000, 0.000000), #37, ));
@68 = CYLINDRICAL_SURFACE( ,  0.500000, AXIS2_PLACEMENT( , #30, #33, ));
@69 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , 0.000000, 1.000000, 0.000000), #35, ));
@70 = CYLINDRICAL_SURFACE( ,  0.500000, AXIS2_PLACEMENT( , #31, #33, ));
@71 = PLANE( , AXIS2_PLACEMENT( , 
       CARTESIAN_POINT( , -1.000000, 0.000000, 0.000000), #36, ));
@72 = CYLINDRICAL_SURFACE( ,  0.500000, AXIS2_PLACEMENT( , #32, #33, ));
!* Done Surfaces *!

@73 = VERTEX(  #1);
@74 = VERTEX(  #2);
@75 = VERTEX(  #3);
@76 = VERTEX(  #4);
@77 = VERTEX(  #5);
@78 = VERTEX(  #6);
@79 = VERTEX(  #7);
@80 = VERTEX(  #8);
@81 = VERTEX(  #9);
@82 = VERTEX(  #10);
@83 = VERTEX(  #11);
@84 = VERTEX(  #12);
@85 = VERTEX(  #13);
@86 = VERTEX(  #14);
@87 = VERTEX(  #15);
@88 = VERTEX(  #16);
!* Done Vertices *!

@89 = EDGE( #73, #74, CURVE_LOGICAL_STRUCTURE(#39, .T.));
@90 = EDGE( #74, #75, CURVE_LOGICAL_STRUCTURE(#40, .T.));
@91 = EDGE( #76, #75, CURVE_LOGICAL_STRUCTURE(#41, .T.));
@92 = EDGE( #76, #73, CURVE_LOGICAL_STRUCTURE(#42, .T.));
@93 = EDGE( #74, #77, CURVE_LOGICAL_STRUCTURE(#43, .T.));
@94 = EDGE( #77, #78, CURVE_LOGICAL_STRUCTURE(#44, .T.));
@95 = EDGE( #78, #79, CURVE_LOGICAL_STRUCTURE(#45, .T.));
@96 = EDGE( #79, #80, CURVE_LOGICAL_STRUCTURE(#46, .T.));
@97 = EDGE( #80, #81, CURVE_LOGICAL_STRUCTURE(#47, .T.));
@98 = EDGE( #81, #82, CURVE_LOGICAL_STRUCTURE(#48, .T.));
@99 = EDGE( #82, #73, CURVE_LOGICAL_STRUCTURE(#49, .T.));
@100 = EDGE( #75, #83, CURVE_LOGICAL_STRUCTURE(#50, .T.));
@101 = EDGE( #77, #83, CURVE_LOGICAL_STRUCTURE(#51, .T.));
@102 = EDGE( #84, #76, CURVE_LOGICAL_STRUCTURE(#52, .T.));
@103 = EDGE( #85, #84, CURVE_LOGICAL_STRUCTURE(#53, .T.));
@104 = EDGE( #86, #85, CURVE_LOGICAL_STRUCTURE(#54, .T.));
@105 = EDGE( #87, #86, CURVE_LOGICAL_STRUCTURE(#55, .T.));
@106 = EDGE( #88, #87, CURVE_LOGICAL_STRUCTURE(#56, .T.));
@107 = EDGE( #83, #88, CURVE_LOGICAL_STRUCTURE(#57, .T.));
@108 = EDGE( #82, #84, CURVE_LOGICAL_STRUCTURE(#58, .T.));
@109 = EDGE( #78, #88, CURVE_LOGICAL_STRUCTURE(#59, .T.));
@110 = EDGE( #87, #79, CURVE_LOGICAL_STRUCTURE(#60, .T.));
@111 = EDGE( #80, #86, CURVE_LOGICAL_STRUCTURE(#61, .T.));
@112 = EDGE( #81, #85, CURVE_LOGICAL_STRUCTURE(#62, .T.));
!* Done Edges *!

@113 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#92, .F.), 
       EDGE_LOGICAL_STRUCTURE(#91, .T.), 
       EDGE_LOGICAL_STRUCTURE(#90, .F.), 
       EDGE_LOGICAL_STRUCTURE(#89, .F.) ));
@114 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#89, .T.), 
       EDGE_LOGICAL_STRUCTURE(#93, .T.), 
       EDGE_LOGICAL_STRUCTURE(#94, .T.), 
       EDGE_LOGICAL_STRUCTURE(#95, .T.), 
       EDGE_LOGICAL_STRUCTURE(#96, .T.), 
       EDGE_LOGICAL_STRUCTURE(#97, .T.), 
       EDGE_LOGICAL_STRUCTURE(#98, .T.), 
       EDGE_LOGICAL_STRUCTURE(#99, .T.) ));
@115 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#93, .F.), 
       EDGE_LOGICAL_STRUCTURE(#90, .T.), 
       EDGE_LOGICAL_STRUCTURE(#100, .T.), 
       EDGE_LOGICAL_STRUCTURE(#101, .F.) ));
@116 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#100, .F.), 
       EDGE_LOGICAL_STRUCTURE(#91, .F.), 
       EDGE_LOGICAL_STRUCTURE(#102, .F.), 
       EDGE_LOGICAL_STRUCTURE(#103, .F.), 
       EDGE_LOGICAL_STRUCTURE(#104, .F.), 
       EDGE_LOGICAL_STRUCTURE(#105, .F.), 
       EDGE_LOGICAL_STRUCTURE(#106, .F.), 
       EDGE_LOGICAL_STRUCTURE(#107, .F.) ));
@117 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#99, .F.), 
       EDGE_LOGICAL_STRUCTURE(#108, .T.), 
       EDGE_LOGICAL_STRUCTURE(#102, .T.), 
       EDGE_LOGICAL_STRUCTURE(#92, .T.) ));
@118 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#101, .T.), 
       EDGE_LOGICAL_STRUCTURE(#107, .T.), 
       EDGE_LOGICAL_STRUCTURE(#109, .F.), 
       EDGE_LOGICAL_STRUCTURE(#94, .F.) ));
@119 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#95, .F.), 
       EDGE_LOGICAL_STRUCTURE(#109, .T.), 
       EDGE_LOGICAL_STRUCTURE(#106, .T.), 
       EDGE_LOGICAL_STRUCTURE(#110, .T.) ));
@120 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#110, .F.), 
       EDGE_LOGICAL_STRUCTURE(#105, .T.), 
       EDGE_LOGICAL_STRUCTURE(#111, .F.), 
       EDGE_LOGICAL_STRUCTURE(#96, .F.) ));
@121 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#97, .F.), 
       EDGE_LOGICAL_STRUCTURE(#111, .T.), 
       EDGE_LOGICAL_STRUCTURE(#104, .T.), 
       EDGE_LOGICAL_STRUCTURE(#112, .F.) ));
@122 = EDGE_LOOP( (
       EDGE_LOGICAL_STRUCTURE(#112, .T.), 
       EDGE_LOGICAL_STRUCTURE(#103, .T.), 
       EDGE_LOGICAL_STRUCTURE(#108, .F.), 
       EDGE_LOGICAL_STRUCTURE(#98, .F.) ));
!* Done Loops *!

@123 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#113, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#63, .T.));
@124 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#114, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#64, .T.));
@125 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#115, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#65, .T.));
@126 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#116, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#66, .T.));
@127 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#117, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#67, .T.));
@128 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#118, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#68, .T.));
@129 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#119, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#69, .T.));
@130 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#120, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#70, .T.));
@131 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#121, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#71, .T.));
@132 = FACE( , (
       LOOP_LOGICAL_STRUCTURE(#122, .T.)  ),
       SURFACE_LOGICAL_STRUCTURE(#72, .T.));
!* Done Faces *!

@133 = CLOSED_SHELL( (
        FACE_LOGICAL_STRUCTURE(#123,.T.),
        FACE_LOGICAL_STRUCTURE(#124,.T.),
        FACE_LOGICAL_STRUCTURE(#125,.T.),
        FACE_LOGICAL_STRUCTURE(#126,.T.),
        FACE_LOGICAL_STRUCTURE(#127,.T.),
        FACE_LOGICAL_STRUCTURE(#128,.T.),
        FACE_LOGICAL_STRUCTURE(#129,.T.),
        FACE_LOGICAL_STRUCTURE(#130,.T.),
        FACE_LOGICAL_STRUCTURE(#131,.T.),
        FACE_LOGICAL_STRUCTURE(#132,.T.)   ));
!* Done Shells *!

ENDSEC;

ENDSTEP;
